/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 84.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 0.0], [13.0, 0.0], [13.1, 0.0], [13.2, 0.0], [13.3, 0.0], [13.4, 0.0], [13.5, 0.0], [13.6, 0.0], [13.7, 0.0], [13.8, 0.0], [13.9, 0.0], [14.0, 0.0], [14.1, 0.0], [14.2, 0.0], [14.3, 0.0], [14.4, 0.0], [14.5, 0.0], [14.6, 0.0], [14.7, 0.0], [14.8, 0.0], [14.9, 0.0], [15.0, 0.0], [15.1, 0.0], [15.2, 0.0], [15.3, 0.0], [15.4, 0.0], [15.5, 0.0], [15.6, 0.0], [15.7, 0.0], [15.8, 0.0], [15.9, 0.0], [16.0, 0.0], [16.1, 0.0], [16.2, 0.0], [16.3, 0.0], [16.4, 0.0], [16.5, 0.0], [16.6, 0.0], [16.7, 0.0], [16.8, 0.0], [16.9, 0.0], [17.0, 0.0], [17.1, 0.0], [17.2, 0.0], [17.3, 0.0], [17.4, 0.0], [17.5, 0.0], [17.6, 0.0], [17.7, 0.0], [17.8, 0.0], [17.9, 0.0], [18.0, 0.0], [18.1, 0.0], [18.2, 0.0], [18.3, 0.0], [18.4, 0.0], [18.5, 0.0], [18.6, 0.0], [18.7, 0.0], [18.8, 0.0], [18.9, 0.0], [19.0, 0.0], [19.1, 0.0], [19.2, 0.0], [19.3, 0.0], [19.4, 0.0], [19.5, 0.0], [19.6, 0.0], [19.7, 0.0], [19.8, 0.0], [19.9, 0.0], [20.0, 0.0], [20.1, 0.0], [20.2, 0.0], [20.3, 0.0], [20.4, 0.0], [20.5, 0.0], [20.6, 0.0], [20.7, 0.0], [20.8, 0.0], [20.9, 0.0], [21.0, 0.0], [21.1, 0.0], [21.2, 0.0], [21.3, 0.0], [21.4, 0.0], [21.5, 0.0], [21.6, 0.0], [21.7, 0.0], [21.8, 0.0], [21.9, 0.0], [22.0, 0.0], [22.1, 0.0], [22.2, 0.0], [22.3, 0.0], [22.4, 0.0], [22.5, 0.0], [22.6, 0.0], [22.7, 0.0], [22.8, 0.0], [22.9, 0.0], [23.0, 0.0], [23.1, 0.0], [23.2, 0.0], [23.3, 0.0], [23.4, 0.0], [23.5, 0.0], [23.6, 0.0], [23.7, 0.0], [23.8, 0.0], [23.9, 0.0], [24.0, 0.0], [24.1, 0.0], [24.2, 0.0], [24.3, 0.0], [24.4, 0.0], [24.5, 0.0], [24.6, 0.0], [24.7, 0.0], [24.8, 0.0], [24.9, 0.0], [25.0, 0.0], [25.1, 0.0], [25.2, 0.0], [25.3, 0.0], [25.4, 0.0], [25.5, 0.0], [25.6, 0.0], [25.7, 0.0], [25.8, 0.0], [25.9, 0.0], [26.0, 0.0], [26.1, 0.0], [26.2, 0.0], [26.3, 0.0], [26.4, 0.0], [26.5, 0.0], [26.6, 0.0], [26.7, 0.0], [26.8, 0.0], [26.9, 0.0], [27.0, 0.0], [27.1, 0.0], [27.2, 0.0], [27.3, 0.0], [27.4, 0.0], [27.5, 0.0], [27.6, 0.0], [27.7, 0.0], [27.8, 0.0], [27.9, 0.0], [28.0, 0.0], [28.1, 0.0], [28.2, 0.0], [28.3, 0.0], [28.4, 0.0], [28.5, 0.0], [28.6, 0.0], [28.7, 0.0], [28.8, 0.0], [28.9, 0.0], [29.0, 0.0], [29.1, 0.0], [29.2, 0.0], [29.3, 0.0], [29.4, 0.0], [29.5, 0.0], [29.6, 0.0], [29.7, 0.0], [29.8, 0.0], [29.9, 0.0], [30.0, 0.0], [30.1, 0.0], [30.2, 0.0], [30.3, 0.0], [30.4, 0.0], [30.5, 0.0], [30.6, 0.0], [30.7, 0.0], [30.8, 0.0], [30.9, 0.0], [31.0, 0.0], [31.1, 0.0], [31.2, 0.0], [31.3, 0.0], [31.4, 0.0], [31.5, 0.0], [31.6, 0.0], [31.7, 0.0], [31.8, 0.0], [31.9, 0.0], [32.0, 0.0], [32.1, 0.0], [32.2, 0.0], [32.3, 0.0], [32.4, 0.0], [32.5, 0.0], [32.6, 0.0], [32.7, 0.0], [32.8, 0.0], [32.9, 0.0], [33.0, 0.0], [33.1, 0.0], [33.2, 0.0], [33.3, 0.0], [33.4, 0.0], [33.5, 0.0], [33.6, 0.0], [33.7, 0.0], [33.8, 0.0], [33.9, 0.0], [34.0, 0.0], [34.1, 0.0], [34.2, 0.0], [34.3, 0.0], [34.4, 0.0], [34.5, 0.0], [34.6, 0.0], [34.7, 0.0], [34.8, 0.0], [34.9, 0.0], [35.0, 0.0], [35.1, 0.0], [35.2, 0.0], [35.3, 0.0], [35.4, 0.0], [35.5, 0.0], [35.6, 0.0], [35.7, 0.0], [35.8, 0.0], [35.9, 0.0], [36.0, 0.0], [36.1, 0.0], [36.2, 0.0], [36.3, 0.0], [36.4, 0.0], [36.5, 0.0], [36.6, 0.0], [36.7, 0.0], [36.8, 0.0], [36.9, 0.0], [37.0, 0.0], [37.1, 0.0], [37.2, 0.0], [37.3, 0.0], [37.4, 0.0], [37.5, 0.0], [37.6, 0.0], [37.7, 0.0], [37.8, 0.0], [37.9, 0.0], [38.0, 0.0], [38.1, 0.0], [38.2, 0.0], [38.3, 0.0], [38.4, 0.0], [38.5, 0.0], [38.6, 0.0], [38.7, 0.0], [38.8, 0.0], [38.9, 0.0], [39.0, 0.0], [39.1, 0.0], [39.2, 0.0], [39.3, 0.0], [39.4, 0.0], [39.5, 0.0], [39.6, 0.0], [39.7, 0.0], [39.8, 0.0], [39.9, 0.0], [40.0, 0.0], [40.1, 0.0], [40.2, 0.0], [40.3, 0.0], [40.4, 0.0], [40.5, 0.0], [40.6, 0.0], [40.7, 0.0], [40.8, 0.0], [40.9, 0.0], [41.0, 0.0], [41.1, 0.0], [41.2, 0.0], [41.3, 0.0], [41.4, 0.0], [41.5, 0.0], [41.6, 0.0], [41.7, 0.0], [41.8, 0.0], [41.9, 0.0], [42.0, 0.0], [42.1, 0.0], [42.2, 0.0], [42.3, 0.0], [42.4, 0.0], [42.5, 0.0], [42.6, 0.0], [42.7, 0.0], [42.8, 0.0], [42.9, 0.0], [43.0, 0.0], [43.1, 0.0], [43.2, 0.0], [43.3, 0.0], [43.4, 0.0], [43.5, 0.0], [43.6, 0.0], [43.7, 0.0], [43.8, 0.0], [43.9, 0.0], [44.0, 0.0], [44.1, 0.0], [44.2, 0.0], [44.3, 0.0], [44.4, 0.0], [44.5, 0.0], [44.6, 0.0], [44.7, 0.0], [44.8, 0.0], [44.9, 0.0], [45.0, 0.0], [45.1, 0.0], [45.2, 0.0], [45.3, 0.0], [45.4, 0.0], [45.5, 0.0], [45.6, 0.0], [45.7, 0.0], [45.8, 0.0], [45.9, 0.0], [46.0, 0.0], [46.1, 0.0], [46.2, 0.0], [46.3, 0.0], [46.4, 0.0], [46.5, 0.0], [46.6, 0.0], [46.7, 0.0], [46.8, 0.0], [46.9, 0.0], [47.0, 0.0], [47.1, 0.0], [47.2, 0.0], [47.3, 0.0], [47.4, 0.0], [47.5, 0.0], [47.6, 0.0], [47.7, 0.0], [47.8, 0.0], [47.9, 0.0], [48.0, 0.0], [48.1, 0.0], [48.2, 0.0], [48.3, 0.0], [48.4, 0.0], [48.5, 0.0], [48.6, 0.0], [48.7, 0.0], [48.8, 0.0], [48.9, 0.0], [49.0, 0.0], [49.1, 0.0], [49.2, 0.0], [49.3, 0.0], [49.4, 0.0], [49.5, 0.0], [49.6, 0.0], [49.7, 0.0], [49.8, 0.0], [49.9, 0.0], [50.0, 0.0], [50.1, 0.0], [50.2, 0.0], [50.3, 0.0], [50.4, 0.0], [50.5, 0.0], [50.6, 0.0], [50.7, 0.0], [50.8, 0.0], [50.9, 0.0], [51.0, 0.0], [51.1, 0.0], [51.2, 0.0], [51.3, 0.0], [51.4, 0.0], [51.5, 0.0], [51.6, 0.0], [51.7, 0.0], [51.8, 0.0], [51.9, 0.0], [52.0, 0.0], [52.1, 0.0], [52.2, 0.0], [52.3, 0.0], [52.4, 0.0], [52.5, 0.0], [52.6, 0.0], [52.7, 0.0], [52.8, 0.0], [52.9, 0.0], [53.0, 0.0], [53.1, 0.0], [53.2, 0.0], [53.3, 0.0], [53.4, 0.0], [53.5, 0.0], [53.6, 0.0], [53.7, 0.0], [53.8, 0.0], [53.9, 0.0], [54.0, 0.0], [54.1, 0.0], [54.2, 0.0], [54.3, 0.0], [54.4, 0.0], [54.5, 0.0], [54.6, 0.0], [54.7, 0.0], [54.8, 0.0], [54.9, 0.0], [55.0, 0.0], [55.1, 0.0], [55.2, 0.0], [55.3, 0.0], [55.4, 0.0], [55.5, 0.0], [55.6, 0.0], [55.7, 0.0], [55.8, 0.0], [55.9, 0.0], [56.0, 0.0], [56.1, 0.0], [56.2, 0.0], [56.3, 0.0], [56.4, 0.0], [56.5, 0.0], [56.6, 0.0], [56.7, 0.0], [56.8, 0.0], [56.9, 0.0], [57.0, 0.0], [57.1, 0.0], [57.2, 0.0], [57.3, 0.0], [57.4, 0.0], [57.5, 0.0], [57.6, 0.0], [57.7, 0.0], [57.8, 0.0], [57.9, 0.0], [58.0, 0.0], [58.1, 0.0], [58.2, 0.0], [58.3, 0.0], [58.4, 0.0], [58.5, 0.0], [58.6, 0.0], [58.7, 0.0], [58.8, 0.0], [58.9, 0.0], [59.0, 0.0], [59.1, 0.0], [59.2, 0.0], [59.3, 0.0], [59.4, 0.0], [59.5, 0.0], [59.6, 0.0], [59.7, 0.0], [59.8, 0.0], [59.9, 0.0], [60.0, 0.0], [60.1, 0.0], [60.2, 0.0], [60.3, 0.0], [60.4, 0.0], [60.5, 0.0], [60.6, 0.0], [60.7, 0.0], [60.8, 0.0], [60.9, 0.0], [61.0, 0.0], [61.1, 0.0], [61.2, 0.0], [61.3, 0.0], [61.4, 0.0], [61.5, 0.0], [61.6, 0.0], [61.7, 0.0], [61.8, 0.0], [61.9, 0.0], [62.0, 0.0], [62.1, 0.0], [62.2, 0.0], [62.3, 0.0], [62.4, 0.0], [62.5, 0.0], [62.6, 0.0], [62.7, 0.0], [62.8, 0.0], [62.9, 0.0], [63.0, 0.0], [63.1, 0.0], [63.2, 0.0], [63.3, 0.0], [63.4, 0.0], [63.5, 0.0], [63.6, 0.0], [63.7, 0.0], [63.8, 0.0], [63.9, 0.0], [64.0, 0.0], [64.1, 0.0], [64.2, 0.0], [64.3, 0.0], [64.4, 0.0], [64.5, 0.0], [64.6, 0.0], [64.7, 0.0], [64.8, 0.0], [64.9, 0.0], [65.0, 0.0], [65.1, 0.0], [65.2, 0.0], [65.3, 0.0], [65.4, 0.0], [65.5, 0.0], [65.6, 0.0], [65.7, 0.0], [65.8, 0.0], [65.9, 0.0], [66.0, 0.0], [66.1, 0.0], [66.2, 0.0], [66.3, 0.0], [66.4, 0.0], [66.5, 0.0], [66.6, 0.0], [66.7, 0.0], [66.8, 0.0], [66.9, 0.0], [67.0, 0.0], [67.1, 0.0], [67.2, 0.0], [67.3, 0.0], [67.4, 0.0], [67.5, 0.0], [67.6, 0.0], [67.7, 0.0], [67.8, 0.0], [67.9, 0.0], [68.0, 0.0], [68.1, 0.0], [68.2, 0.0], [68.3, 0.0], [68.4, 0.0], [68.5, 0.0], [68.6, 0.0], [68.7, 0.0], [68.8, 0.0], [68.9, 0.0], [69.0, 0.0], [69.1, 0.0], [69.2, 0.0], [69.3, 0.0], [69.4, 0.0], [69.5, 0.0], [69.6, 0.0], [69.7, 0.0], [69.8, 0.0], [69.9, 0.0], [70.0, 0.0], [70.1, 0.0], [70.2, 0.0], [70.3, 0.0], [70.4, 0.0], [70.5, 0.0], [70.6, 0.0], [70.7, 0.0], [70.8, 0.0], [70.9, 0.0], [71.0, 0.0], [71.1, 0.0], [71.2, 0.0], [71.3, 0.0], [71.4, 0.0], [71.5, 0.0], [71.6, 0.0], [71.7, 0.0], [71.8, 0.0], [71.9, 0.0], [72.0, 0.0], [72.1, 0.0], [72.2, 0.0], [72.3, 0.0], [72.4, 0.0], [72.5, 0.0], [72.6, 0.0], [72.7, 0.0], [72.8, 0.0], [72.9, 0.0], [73.0, 0.0], [73.1, 0.0], [73.2, 0.0], [73.3, 0.0], [73.4, 0.0], [73.5, 0.0], [73.6, 0.0], [73.7, 0.0], [73.8, 0.0], [73.9, 0.0], [74.0, 0.0], [74.1, 0.0], [74.2, 0.0], [74.3, 0.0], [74.4, 0.0], [74.5, 0.0], [74.6, 0.0], [74.7, 0.0], [74.8, 0.0], [74.9, 0.0], [75.0, 0.0], [75.1, 0.0], [75.2, 0.0], [75.3, 0.0], [75.4, 0.0], [75.5, 0.0], [75.6, 0.0], [75.7, 0.0], [75.8, 0.0], [75.9, 0.0], [76.0, 0.0], [76.1, 0.0], [76.2, 0.0], [76.3, 0.0], [76.4, 0.0], [76.5, 0.0], [76.6, 0.0], [76.7, 0.0], [76.8, 0.0], [76.9, 0.0], [77.0, 0.0], [77.1, 0.0], [77.2, 0.0], [77.3, 0.0], [77.4, 0.0], [77.5, 0.0], [77.6, 0.0], [77.7, 0.0], [77.8, 0.0], [77.9, 0.0], [78.0, 0.0], [78.1, 0.0], [78.2, 0.0], [78.3, 0.0], [78.4, 0.0], [78.5, 0.0], [78.6, 0.0], [78.7, 0.0], [78.8, 0.0], [78.9, 0.0], [79.0, 0.0], [79.1, 0.0], [79.2, 0.0], [79.3, 0.0], [79.4, 0.0], [79.5, 0.0], [79.6, 0.0], [79.7, 0.0], [79.8, 0.0], [79.9, 0.0], [80.0, 0.0], [80.1, 0.0], [80.2, 0.0], [80.3, 0.0], [80.4, 0.0], [80.5, 0.0], [80.6, 0.0], [80.7, 0.0], [80.8, 0.0], [80.9, 0.0], [81.0, 0.0], [81.1, 0.0], [81.2, 0.0], [81.3, 0.0], [81.4, 0.0], [81.5, 0.0], [81.6, 0.0], [81.7, 0.0], [81.8, 0.0], [81.9, 0.0], [82.0, 0.0], [82.1, 0.0], [82.2, 0.0], [82.3, 0.0], [82.4, 0.0], [82.5, 0.0], [82.6, 0.0], [82.7, 0.0], [82.8, 0.0], [82.9, 0.0], [83.0, 0.0], [83.1, 0.0], [83.2, 0.0], [83.3, 0.0], [83.4, 0.0], [83.5, 0.0], [83.6, 0.0], [83.7, 0.0], [83.8, 0.0], [83.9, 0.0], [84.0, 0.0], [84.1, 0.0], [84.2, 0.0], [84.3, 0.0], [84.4, 0.0], [84.5, 0.0], [84.6, 0.0], [84.7, 0.0], [84.8, 0.0], [84.9, 0.0], [85.0, 0.0], [85.1, 0.0], [85.2, 0.0], [85.3, 0.0], [85.4, 0.0], [85.5, 0.0], [85.6, 0.0], [85.7, 0.0], [85.8, 0.0], [85.9, 0.0], [86.0, 0.0], [86.1, 0.0], [86.2, 0.0], [86.3, 0.0], [86.4, 0.0], [86.5, 0.0], [86.6, 0.0], [86.7, 0.0], [86.8, 0.0], [86.9, 0.0], [87.0, 0.0], [87.1, 0.0], [87.2, 0.0], [87.3, 0.0], [87.4, 0.0], [87.5, 0.0], [87.6, 0.0], [87.7, 0.0], [87.8, 0.0], [87.9, 0.0], [88.0, 0.0], [88.1, 0.0], [88.2, 0.0], [88.3, 1.0], [88.4, 1.0], [88.5, 1.0], [88.6, 1.0], [88.7, 1.0], [88.8, 1.0], [88.9, 1.0], [89.0, 1.0], [89.1, 1.0], [89.2, 1.0], [89.3, 1.0], [89.4, 1.0], [89.5, 1.0], [89.6, 1.0], [89.7, 1.0], [89.8, 1.0], [89.9, 1.0], [90.0, 1.0], [90.1, 1.0], [90.2, 1.0], [90.3, 1.0], [90.4, 1.0], [90.5, 1.0], [90.6, 1.0], [90.7, 1.0], [90.8, 1.0], [90.9, 1.0], [91.0, 1.0], [91.1, 1.0], [91.2, 1.0], [91.3, 1.0], [91.4, 1.0], [91.5, 1.0], [91.6, 1.0], [91.7, 1.0], [91.8, 1.0], [91.9, 1.0], [92.0, 1.0], [92.1, 1.0], [92.2, 1.0], [92.3, 1.0], [92.4, 1.0], [92.5, 1.0], [92.6, 1.0], [92.7, 1.0], [92.8, 1.0], [92.9, 1.0], [93.0, 1.0], [93.1, 1.0], [93.2, 1.0], [93.3, 1.0], [93.4, 1.0], [93.5, 1.0], [93.6, 1.0], [93.7, 1.0], [93.8, 1.0], [93.9, 1.0], [94.0, 1.0], [94.1, 1.0], [94.2, 1.0], [94.3, 1.0], [94.4, 1.0], [94.5, 1.0], [94.6, 1.0], [94.7, 1.0], [94.8, 1.0], [94.9, 1.0], [95.0, 1.0], [95.1, 1.0], [95.2, 1.0], [95.3, 1.0], [95.4, 1.0], [95.5, 1.0], [95.6, 1.0], [95.7, 1.0], [95.8, 1.0], [95.9, 1.0], [96.0, 1.0], [96.1, 1.0], [96.2, 1.0], [96.3, 1.0], [96.4, 1.0], [96.5, 1.0], [96.6, 1.0], [96.7, 1.0], [96.8, 1.0], [96.9, 1.0], [97.0, 1.0], [97.1, 1.0], [97.2, 1.0], [97.3, 1.0], [97.4, 1.0], [97.5, 1.0], [97.6, 1.0], [97.7, 1.0], [97.8, 1.0], [97.9, 1.0], [98.0, 1.0], [98.1, 1.0], [98.2, 1.0], [98.3, 1.0], [98.4, 1.0], [98.5, 1.0], [98.6, 1.0], [98.7, 1.0], [98.8, 1.0], [98.9, 1.0], [99.0, 1.0], [99.1, 1.0], [99.2, 1.0], [99.3, 1.0], [99.4, 1.0], [99.5, 1.0], [99.6, 1.0], [99.7, 1.0], [99.8, 1.0], [99.9, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3000000.0, "minX": 0.0, "maxY": 3000000.0, "series": [{"data": [[0.0, 3000000.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 4.9E-324, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3000000.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3000000.0, "series": [{"data": [[0.0, 3000000.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 4.9E-324, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.7586908104967582, "minX": 1.557481762E12, "maxY": 3.0, "series": [{"data": [[1.557481789E12, 3.0], [1.557481916E12, 3.0], [1.55748183E12, 3.0], [1.55748192E12, 3.0], [1.557481834E12, 3.0], [1.557481875E12, 3.0], [1.557481912E12, 3.0], [1.557481826E12, 3.0], [1.557481867E12, 3.0], [1.557481871E12, 3.0], [1.557481785E12, 3.0], [1.557481863E12, 3.0], [1.557481777E12, 3.0], [1.557481781E12, 3.0], [1.557481908E12, 3.0], [1.557481822E12, 3.0], [1.557481773E12, 3.0], [1.5574819E12, 3.0], [1.557481814E12, 3.0], [1.557481904E12, 3.0], [1.557481818E12, 3.0], [1.557481859E12, 3.0], [1.557481768E12, 3.0], [1.557481895E12, 3.0], [1.557481809E12, 3.0], [1.557481813E12, 3.0], [1.557481854E12, 3.0], [1.557481805E12, 3.0], [1.557481932E12, 3.0], [1.557481846E12, 3.0], [1.55748185E12, 3.0], [1.557481764E12, 3.0], [1.557481891E12, 3.0], [1.557481928E12, 3.0], [1.557481842E12, 3.0], [1.557481883E12, 3.0], [1.557481887E12, 3.0], [1.557481801E12, 3.0], [1.557481879E12, 3.0], [1.557481793E12, 3.0], [1.557481797E12, 3.0], [1.557481924E12, 3.0], [1.557481838E12, 3.0], [1.557481874E12, 3.0], [1.557481788E12, 3.0], [1.557481915E12, 3.0], [1.557481792E12, 3.0], [1.557481919E12, 3.0], [1.557481833E12, 3.0], [1.557481784E12, 3.0], [1.557481911E12, 3.0], [1.557481825E12, 3.0], [1.557481829E12, 3.0], [1.55748187E12, 3.0], [1.557481821E12, 3.0], [1.557481862E12, 3.0], [1.557481866E12, 3.0], [1.55748178E12, 3.0], [1.557481907E12, 3.0], [1.557481858E12, 3.0], [1.557481772E12, 3.0], [1.557481899E12, 3.0], [1.557481776E12, 3.0], [1.557481903E12, 3.0], [1.557481817E12, 3.0], [1.557481853E12, 3.0], [1.557481767E12, 3.0], [1.557481894E12, 3.0], [1.557481898E12, 3.0], [1.557481812E12, 3.0], [1.55748189E12, 3.0], [1.557481804E12, 3.0], [1.557481931E12, 3.0], [1.557481808E12, 3.0], [1.557481935E12, 2.7586908104967582], [1.557481849E12, 3.0], [1.557481763E12, 3.0], [1.5574818E12, 3.0], [1.557481927E12, 3.0], [1.557481841E12, 3.0], [1.557481845E12, 3.0], [1.557481886E12, 3.0], [1.557481837E12, 3.0], [1.557481878E12, 3.0], [1.557481882E12, 3.0], [1.557481796E12, 3.0], [1.557481923E12, 3.0], [1.557481832E12, 3.0], [1.557481873E12, 3.0], [1.557481787E12, 3.0], [1.557481877E12, 3.0], [1.557481791E12, 3.0], [1.557481918E12, 3.0], [1.557481869E12, 3.0], [1.557481783E12, 3.0], [1.55748191E12, 3.0], [1.557481914E12, 3.0], [1.557481828E12, 3.0], [1.557481906E12, 3.0], [1.55748182E12, 3.0], [1.557481824E12, 3.0], [1.557481865E12, 3.0], [1.557481779E12, 3.0], [1.557481816E12, 3.0], [1.557481857E12, 3.0], [1.557481771E12, 3.0], [1.557481861E12, 3.0], [1.557481775E12, 3.0], [1.557481902E12, 3.0], [1.557481852E12, 3.0], [1.557481766E12, 3.0], [1.557481856E12, 3.0], [1.55748177E12, 3.0], [1.557481897E12, 3.0], [1.557481811E12, 3.0], [1.557481848E12, 3.0], [1.557481762E12, 3.0], [1.557481889E12, 3.0], [1.557481803E12, 3.0], [1.557481893E12, 3.0], [1.557481807E12, 3.0], [1.557481934E12, 3.0], [1.557481885E12, 3.0], [1.557481799E12, 3.0], [1.557481926E12, 3.0], [1.55748193E12, 3.0], [1.557481844E12, 3.0], [1.557481922E12, 3.0], [1.557481836E12, 3.0], [1.55748184E12, 3.0], [1.557481881E12, 3.0], [1.557481795E12, 3.0], [1.557481917E12, 3.0], [1.557481831E12, 3.0], [1.557481876E12, 3.0], [1.55748179E12, 3.0], [1.557481868E12, 3.0], [1.557481782E12, 3.0], [1.557481872E12, 3.0], [1.557481786E12, 3.0], [1.557481913E12, 3.0], [1.557481827E12, 3.0], [1.557481864E12, 3.0], [1.557481778E12, 3.0], [1.557481905E12, 3.0], [1.557481819E12, 3.0], [1.557481909E12, 3.0], [1.557481823E12, 3.0], [1.557481901E12, 3.0], [1.557481815E12, 3.0], [1.55748186E12, 3.0], [1.557481774E12, 3.0], [1.557481896E12, 3.0], [1.55748181E12, 3.0], [1.557481851E12, 3.0], [1.557481855E12, 3.0], [1.557481769E12, 3.0], [1.557481933E12, 3.0], [1.557481847E12, 3.0], [1.557481765E12, 3.0], [1.557481892E12, 3.0], [1.557481806E12, 3.0], [1.557481884E12, 3.0], [1.557481798E12, 3.0], [1.557481888E12, 3.0], [1.557481802E12, 3.0], [1.557481929E12, 3.0], [1.557481843E12, 3.0], [1.55748188E12, 3.0], [1.557481794E12, 3.0], [1.557481921E12, 3.0], [1.557481835E12, 3.0], [1.557481925E12, 3.0], [1.557481839E12, 3.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.557481935E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.08000000000000002, "minX": 1.0, "maxY": 0.11923706532896301, "series": [{"data": [[2.0, 0.10076857386848852], [1.0, 0.08000000000000002], [3.0, 0.11923706532896301]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[2.9991693333333216, 0.11922166666666283]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11446.0, "minX": 1.557481762E12, "maxY": 1.6806335E7, "series": [{"data": [[1.557481789E12, 1.5087476E7], [1.557481916E12, 1.4272285E7], [1.55748183E12, 1.4986973E7], [1.55748192E12, 1.3239767E7], [1.557481834E12, 1.5602017E7], [1.557481875E12, 1.3973353E7], [1.557481912E12, 1.534174E7], [1.557481826E12, 1.4517959E7], [1.557481867E12, 1.6041825E7], [1.557481871E12, 1.601176E7], [1.557481785E12, 1.4443226E7], [1.557481863E12, 1.6023786E7], [1.557481777E12, 1.5726572E7], [1.557481781E12, 1.634677E7], [1.557481908E12, 1.5922424E7], [1.557481822E12, 1.5789279E7], [1.557481773E12, 1.5419909E7], [1.5574819E12, 1.4733568E7], [1.557481814E12, 1.4736145E7], [1.557481904E12, 1.4248233E7], [1.557481818E12, 1.4877021E7], [1.557481859E12, 1.6230805E7], [1.557481768E12, 1.1410097E7], [1.557481895E12, 1.3507775E7], [1.557481809E12, 1.5658711E7], [1.557481813E12, 1.5746329E7], [1.557481854E12, 1.5042808E7], [1.557481805E12, 1.4248233E7], [1.557481932E12, 1.565957E7], [1.557481846E12, 1.436248E7], [1.55748185E12, 1.5111528E7], [1.557481764E12, 8549627.0], [1.557481891E12, 1.4268849E7], [1.557481928E12, 1.4699208E7], [1.557481842E12, 1.6206753E7], [1.557481883E12, 1.4831494E7], [1.557481887E12, 1.4770505E7], [1.557481801E12, 1.5667301E7], [1.557481879E12, 1.4490471E7], [1.557481793E12, 1.1979614E7], [1.557481797E12, 1.4882175E7], [1.557481924E12, 1.5883769E7], [1.557481838E12, 1.6806335E7], [1.557481874E12, 1.5145888E7], [1.557481788E12, 1.5162209E7], [1.557481915E12, 1.4489612E7], [1.557481792E12, 1.4825481E7], [1.557481919E12, 1.3817874E7], [1.557481833E12, 1.6167239E7], [1.557481784E12, 1.6115699E7], [1.557481911E12, 1.4609013E7], [1.557481825E12, 1.5449115E7], [1.557481829E12, 1.6299525E7], [1.55748187E12, 1.5356343E7], [1.557481821E12, 1.6607047E7], [1.557481862E12, 1.5689635E7], [1.557481866E12, 1.6057287E7], [1.55748178E12, 1.5313393E7], [1.557481907E12, 1.6556366E7], [1.557481858E12, 1.5995439E7], [1.557481772E12, 1.5939604E7], [1.557481899E12, 1.5888923E7], [1.557481776E12, 1.5862294E7], [1.557481903E12, 1.4767069E7], [1.557481817E12, 1.5242096E7], [1.557481853E12, 1.6619932E7], [1.557481767E12, 1.049698E7], [1.557481894E12, 1.4552319E7], [1.557481898E12, 1.6738474E7], [1.557481812E12, 1.528161E7], [1.55748189E12, 1.3966481E7], [1.557481804E12, 1.4346159E7], [1.557481931E12, 1.6002311E7], [1.557481808E12, 1.6002311E7], [1.557481935E12, 8870893.0], [1.557481849E12, 1.6057287E7], [1.557481763E12, 4377464.0], [1.5574818E12, 1.4992986E7], [1.557481927E12, 1.4567781E7], [1.557481841E12, 1.6070172E7], [1.557481845E12, 1.4737004E7], [1.557481886E12, 1.3372053E7], [1.557481837E12, 1.6112263E7], [1.557481878E12, 1.5245532E7], [1.557481882E12, 1.6009183E7], [1.557481796E12, 1.5009307E7], [1.557481923E12, 1.4710375E7], [1.557481832E12, 1.6534891E7], [1.557481873E12, 1.47748E7], [1.557481787E12, 1.4081587E7], [1.557481877E12, 1.5345176E7], [1.557481791E12, 1.4052381E7], [1.557481918E12, 1.3902915E7], [1.557481869E12, 1.6086493E7], [1.557481783E12, 1.6220497E7], [1.55748191E12, 1.3602265E7], [1.557481914E12, 1.5600299E7], [1.557481828E12, 1.5129567E7], [1.557481906E12, 1.5701661E7], [1.55748182E12, 1.4974947E7], [1.557481824E12, 1.6760808E7], [1.557481865E12, 1.515276E7], [1.557481779E12, 1.6030658E7], [1.557481816E12, 1.4854687E7], [1.557481857E12, 1.4863277E7], [1.557481771E12, 1.4901932E7], [1.557481861E12, 1.6342475E7], [1.557481775E12, 1.5181966E7], [1.557481902E12, 1.3818733E7], [1.557481852E12, 1.564239E7], [1.557481766E12, 1.0087237E7], [1.557481856E12, 1.4863277E7], [1.55748177E12, 1.4311799E7], [1.557481897E12, 1.6485928E7], [1.557481811E12, 1.5828793E7], [1.557481848E12, 1.4794557E7], [1.557481762E12, 83323.0], [1.557481889E12, 1.6018632E7], [1.557481803E12, 1.3492313E7], [1.557481893E12, 1.4732709E7], [1.557481807E12, 1.6008324E7], [1.557481934E12, 1.6022927E7], [1.557481885E12, 1.3061095E7], [1.557481799E12, 1.5905244E7], [1.557481926E12, 1.4883034E7], [1.55748193E12, 1.4267131E7], [1.557481844E12, 1.4698349E7], [1.557481922E12, 1.480057E7], [1.557481836E12, 1.645844E7], [1.55748184E12, 1.5267007E7], [1.557481881E12, 1.3475992E7], [1.557481795E12, 1.5062565E7], [1.557481917E12, 1.3991392E7], [1.557481831E12, 1.5806459E7], [1.557481876E12, 1.4849533E7], [1.55748179E12, 1.2839473E7], [1.557481868E12, 1.6158649E7], [1.557481782E12, 1.5830511E7], [1.557481872E12, 1.5532438E7], [1.557481786E12, 1.4741299E7], [1.557481913E12, 1.5494642E7], [1.557481827E12, 1.3862542E7], [1.557481864E12, 1.5956784E7], [1.557481778E12, 1.6444696E7], [1.557481905E12, 1.4761915E7], [1.557481819E12, 1.6351924E7], [1.557481909E12, 1.3607419E7], [1.557481823E12, 1.6255716E7], [1.557481901E12, 1.4873585E7], [1.557481815E12, 1.2296585E7], [1.55748186E12, 1.5440525E7], [1.557481774E12, 1.5821921E7], [1.557481896E12, 1.5432794E7], [1.55748181E12, 1.5292777E7], [1.557481851E12, 1.6261729E7], [1.557481855E12, 1.4256823E7], [1.557481769E12, 1.3209702E7], [1.557481933E12, 1.6156931E7], [1.557481847E12, 1.4730132E7], [1.557481765E12, 8977409.0], [1.557481892E12, 1.3544712E7], [1.557481806E12, 1.510981E7], [1.557481884E12, 1.5261853E7], [1.557481798E12, 1.5372664E7], [1.557481888E12, 1.5555631E7], [1.557481802E12, 1.480057E7], [1.557481929E12, 1.5364933E7], [1.557481843E12, 1.5376959E7], [1.55748188E12, 1.4145153E7], [1.557481794E12, 1.4320389E7], [1.557481921E12, 1.4736145E7], [1.557481835E12, 1.52043E7], [1.557481925E12, 1.383849E7], [1.557481839E12, 1.6113122E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.557481789E12, 2072552.0], [1.557481916E12, 1960570.0], [1.55748183E12, 2058746.0], [1.55748192E12, 1818734.0], [1.557481834E12, 2143234.0], [1.557481875E12, 1919506.0], [1.557481912E12, 2107480.0], [1.557481826E12, 1994318.0], [1.557481867E12, 2203650.0], [1.557481871E12, 2199520.0], [1.557481785E12, 1984052.0], [1.557481863E12, 2201172.0], [1.557481777E12, 2160344.0], [1.557481781E12, 2245540.0], [1.557481908E12, 2187248.0], [1.557481822E12, 2168958.0], [1.557481773E12, 2118218.0], [1.5574819E12, 2023936.0], [1.557481814E12, 2024290.0], [1.557481904E12, 1957266.0], [1.557481818E12, 2043642.0], [1.557481859E12, 2229610.0], [1.557481768E12, 1567394.0], [1.557481895E12, 1855550.0], [1.557481809E12, 2151022.0], [1.557481813E12, 2163058.0], [1.557481854E12, 2066416.0], [1.557481805E12, 1957266.0], [1.557481932E12, 2151140.0], [1.557481846E12, 1972960.0], [1.55748185E12, 2075856.0], [1.557481764E12, 1174454.0], [1.557481891E12, 1960098.0], [1.557481928E12, 2019216.0], [1.557481842E12, 2226306.0], [1.557481883E12, 2037388.0], [1.557481887E12, 2029010.0], [1.557481801E12, 2152202.0], [1.557481879E12, 1990542.0], [1.557481793E12, 1645628.0], [1.557481797E12, 2044350.0], [1.557481924E12, 2181938.0], [1.557481838E12, 2308670.0], [1.557481874E12, 2080576.0], [1.557481788E12, 2082818.0], [1.557481915E12, 1990424.0], [1.557481792E12, 2036562.0], [1.557481919E12, 1898148.0], [1.557481833E12, 2220878.0], [1.557481784E12, 2213798.0], [1.557481911E12, 2006826.0], [1.557481825E12, 2122230.0], [1.557481829E12, 2239050.0], [1.55748187E12, 2109486.0], [1.557481821E12, 2281294.0], [1.557481862E12, 2155270.0], [1.557481866E12, 2205774.0], [1.55748178E12, 2103586.0], [1.557481907E12, 2274332.0], [1.557481858E12, 2197278.0], [1.557481772E12, 2189608.0], [1.557481899E12, 2182646.0], [1.557481776E12, 2178988.0], [1.557481903E12, 2028538.0], [1.557481817E12, 2093792.0], [1.557481853E12, 2283064.0], [1.557481767E12, 1441960.0], [1.557481894E12, 1999038.0], [1.557481898E12, 2299348.0], [1.557481812E12, 2099220.0], [1.55748189E12, 1918562.0], [1.557481804E12, 1970718.0], [1.557481931E12, 2198222.0], [1.557481808E12, 2198222.0], [1.557481935E12, 1218586.0], [1.557481849E12, 2205774.0], [1.557481763E12, 601328.0], [1.5574818E12, 2059572.0], [1.557481927E12, 2001162.0], [1.557481841E12, 2207544.0], [1.557481845E12, 2024408.0], [1.557481886E12, 1836906.0], [1.557481837E12, 2213326.0], [1.557481878E12, 2094264.0], [1.557481882E12, 2199166.0], [1.557481796E12, 2061814.0], [1.557481923E12, 2020750.0], [1.557481832E12, 2271382.0], [1.557481873E12, 2029600.0], [1.557481787E12, 1934374.0], [1.557481877E12, 2107952.0], [1.557481791E12, 1930362.0], [1.557481918E12, 1909830.0], [1.557481869E12, 2209786.0], [1.557481783E12, 2228194.0], [1.55748191E12, 1868530.0], [1.557481914E12, 2142998.0], [1.557481828E12, 2078334.0], [1.557481906E12, 2156922.0], [1.55748182E12, 2057094.0], [1.557481824E12, 2302416.0], [1.557481865E12, 2081520.0], [1.557481779E12, 2202116.0], [1.557481816E12, 2040574.0], [1.557481857E12, 2041754.0], [1.557481771E12, 2047064.0], [1.557481861E12, 2244950.0], [1.557481775E12, 2085532.0], [1.557481902E12, 1898266.0], [1.557481852E12, 2148780.0], [1.557481766E12, 1385674.0], [1.557481856E12, 2041754.0], [1.55748177E12, 1965998.0], [1.557481897E12, 2264656.0], [1.557481811E12, 2174386.0], [1.557481848E12, 2032314.0], [1.557481762E12, 11446.0], [1.557481889E12, 2200464.0], [1.557481803E12, 1853426.0], [1.557481893E12, 2023818.0], [1.557481807E12, 2199048.0], [1.557481934E12, 2201054.0], [1.557481885E12, 1794190.0], [1.557481799E12, 2184888.0], [1.557481926E12, 2044468.0], [1.55748193E12, 1959862.0], [1.557481844E12, 2019098.0], [1.557481922E12, 2033140.0], [1.557481836E12, 2260880.0], [1.55748184E12, 2097214.0], [1.557481881E12, 1851184.0], [1.557481795E12, 2069130.0], [1.557481917E12, 1921984.0], [1.557481831E12, 2171318.0], [1.557481876E12, 2039866.0], [1.55748179E12, 1763746.0], [1.557481868E12, 2219698.0], [1.557481782E12, 2174622.0], [1.557481872E12, 2133676.0], [1.557481786E12, 2024998.0], [1.557481913E12, 2128484.0], [1.557481827E12, 1904284.0], [1.557481864E12, 2191968.0], [1.557481778E12, 2258992.0], [1.557481905E12, 2027830.0], [1.557481819E12, 2246248.0], [1.557481909E12, 1869238.0], [1.557481823E12, 2233032.0], [1.557481901E12, 2043170.0], [1.557481815E12, 1689170.0], [1.55748186E12, 2121050.0], [1.557481774E12, 2173442.0], [1.557481896E12, 2119988.0], [1.55748181E12, 2100754.0], [1.557481851E12, 2233858.0], [1.557481855E12, 1958446.0], [1.557481769E12, 1814604.0], [1.557481933E12, 2219462.0], [1.557481847E12, 2023464.0], [1.557481765E12, 1233218.0], [1.557481892E12, 1860624.0], [1.557481806E12, 2075620.0], [1.557481884E12, 2096506.0], [1.557481798E12, 2111728.0], [1.557481888E12, 2136862.0], [1.557481802E12, 2033140.0], [1.557481929E12, 2110666.0], [1.557481843E12, 2112318.0], [1.55748188E12, 1943106.0], [1.557481794E12, 1967178.0], [1.557481921E12, 2024290.0], [1.557481835E12, 2088600.0], [1.557481925E12, 1900980.0], [1.557481839E12, 2213444.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.557481935E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 0.10513672374137477, "minX": 1.557481762E12, "maxY": 1.690721649484537, "series": [{"data": [[1.557481789E12, 0.11882259166476944], [1.557481916E12, 0.12621125489015944], [1.55748183E12, 0.11801455837679843], [1.55748192E12, 0.13469149419321272], [1.557481834E12, 0.11517921048284978], [1.557481875E12, 0.13001782750353477], [1.557481912E12, 0.11679731243001087], [1.557481826E12, 0.12454884326371125], [1.557481867E12, 0.11105756358768445], [1.557481871E12, 0.11094420600858375], [1.557481785E12, 0.12334958962769184], [1.557481863E12, 0.11139701940602512], [1.557481777E12, 0.11361153594057227], [1.557481781E12, 0.10867052023121343], [1.557481908E12, 0.11145878290893381], [1.557481822E12, 0.11375877264566661], [1.557481773E12, 0.11709654058269699], [1.5574819E12, 0.12202658582089612], [1.557481814E12, 0.12060623724861576], [1.557481904E12, 0.1288358352926993], [1.557481818E12, 0.12061897338183446], [1.557481859E12, 0.10849431066419657], [1.557481768E12, 0.15312805842053737], [1.557481895E12, 0.13392686804451429], [1.557481809E12, 0.11509133797794727], [1.557481813E12, 0.11265070099830887], [1.557481854E12, 0.11677706715395124], [1.557481805E12, 0.12594200277325646], [1.557481932E12, 0.1139330773450358], [1.557481846E12, 0.1257775119617228], [1.55748185E12, 0.11527967257844475], [1.557481764E12, 0.1944137445996182], [1.557481891E12, 0.12569983745710692], [1.557481928E12, 0.1183964469378209], [1.557481842E12, 0.10945036306779027], [1.557481883E12, 0.1186725356191358], [1.557481887E12, 0.12230299505670233], [1.557481801E12, 0.11184823729371117], [1.557481879E12, 0.1219396526172268], [1.557481793E12, 0.15309049189731755], [1.557481797E12, 0.11919191919191915], [1.557481924E12, 0.11216267373316739], [1.557481838E12, 0.10513672374137477], [1.557481874E12, 0.11779718693284941], [1.557481788E12, 0.11670726870998797], [1.557481915E12, 0.12414038415935491], [1.557481792E12, 0.11698244394229104], [1.557481919E12, 0.1317294541837631], [1.557481833E12, 0.10902715052335035], [1.557481784E12, 0.10857630190288321], [1.557481911E12, 0.12012700652672463], [1.557481825E12, 0.11720878509869348], [1.557481829E12, 0.10750988142292531], [1.55748187E12, 0.11400123063153722], [1.557481821E12, 0.10789841204158691], [1.557481862E12, 0.11563098822885312], [1.557481866E12, 0.10800834536992444], [1.55748178E12, 0.11583553037527365], [1.557481907E12, 0.10807305177959955], [1.557481858E12, 0.1121314644755916], [1.557481772E12, 0.11009915930157393], [1.557481899E12, 0.112396604854841], [1.557481776E12, 0.11258529188779375], [1.557481903E12, 0.12442557151998138], [1.557481817E12, 0.1158701532912536], [1.557481853E12, 0.10605747364068614], [1.557481767E12, 0.1633387888707028], [1.557481894E12, 0.12189363083643222], [1.557481898E12, 0.10525505491121799], [1.557481812E12, 0.1159640247329962], [1.55748189E12, 0.12780613813887678], [1.557481804E12, 0.12502245374528495], [1.557481931E12, 0.110902356540877], [1.557481808E12, 0.11133179451393004], [1.557481935E12, 0.11774958845744174], [1.557481849E12, 0.11009468785106725], [1.557481763E12, 0.3804945054945033], [1.5574818E12, 0.11991520568351106], [1.557481927E12, 0.12270770682233581], [1.557481841E12, 0.11086166345948216], [1.557481845E12, 0.11978316623921684], [1.557481886E12, 0.1368921436371806], [1.557481837E12, 0.1101455456629528], [1.557481878E12, 0.1168582375478924], [1.557481882E12, 0.10742072221924132], [1.557481796E12, 0.11829680077834383], [1.557481923E12, 0.11982481751824878], [1.557481832E12, 0.10577172840147575], [1.557481873E12, 0.12000000000000008], [1.557481787E12, 0.1274324406758982], [1.557481877E12, 0.11464397671294232], [1.557481791E12, 0.12659698025551705], [1.557481918E12, 0.1270929873339516], [1.557481869E12, 0.10973460778555053], [1.557481783E12, 0.10909283482497503], [1.55748191E12, 0.1299652668140202], [1.557481914E12, 0.11287924673751444], [1.557481828E12, 0.11752682677567702], [1.557481906E12, 0.11269763116144221], [1.55748182E12, 0.12034646933975851], [1.557481824E12, 0.10542230422304245], [1.557481865E12, 0.11417233560090713], [1.557481779E12, 0.1105990783410138], [1.557481816E12, 0.12137859249407305], [1.557481857E12, 0.11917008611223445], [1.557481771E12, 0.11966797325340116], [1.557481861E12, 0.10812089356110391], [1.557481775E12, 0.11734751612538159], [1.557481902E12, 0.1278050599863241], [1.557481852E12, 0.11422295442064832], [1.557481766E12, 0.16792983053734215], [1.557481856E12, 0.12073050916026092], [1.55748177E12, 0.1229217934097595], [1.557481897E12, 0.10608586911213022], [1.557481811E12, 0.11304064687686616], [1.557481848E12, 0.12158160599198777], [1.557481762E12, 1.690721649484537], [1.557481889E12, 0.1097168597168596], [1.557481803E12, 0.1361176545489269], [1.557481893E12, 0.12203370065885326], [1.557481807E12, 0.11118265722257935], [1.557481934E12, 0.11161743419289101], [1.557481885E12, 0.1387043735613285], [1.557481799E12, 0.11336141715273315], [1.557481926E12, 0.11941590672977025], [1.55748193E12, 0.12402914082726198], [1.557481844E12, 0.12079948571094606], [1.557481922E12, 0.123737666860128], [1.557481836E12, 0.10563674321503168], [1.55748184E12, 0.11714398244528258], [1.557481881E12, 0.1347526772055087], [1.557481795E12, 0.11696606786427147], [1.557481917E12, 0.12960461689587408], [1.557481831E12, 0.11412423237867536], [1.557481876E12, 0.11991670041071352], [1.55748179E12, 0.13962668093931907], [1.557481868E12, 0.1105204401679869], [1.557481782E12, 0.11270280536111633], [1.557481872E12, 0.11265346753677627], [1.557481786E12, 0.12324456616747272], [1.557481913E12, 0.11370440181838377], [1.557481827E12, 0.13204858098897124], [1.557481864E12, 0.1121877691645136], [1.557481778E12, 0.10875470121186774], [1.557481905E12, 0.12260692464358544], [1.557481819E12, 0.10952931288085696], [1.557481909E12, 0.1328830250615495], [1.557481823E12, 0.10869794969351092], [1.557481901E12, 0.12116661853883913], [1.557481815E12, 0.15033181976947355], [1.55748186E12, 0.11354659248956903], [1.557481774E12, 0.11249253488245814], [1.557481896E12, 0.11633084715573896], [1.55748181E12, 0.11638487895298565], [1.557481851E12, 0.10807669959325972], [1.557481855E12, 0.12695065373260195], [1.557481769E12, 0.13376251788268995], [1.557481933E12, 0.1093093731724174], [1.557481847E12, 0.12497084208070874], [1.557481765E12, 0.18505406181226733], [1.557481892E12, 0.13096144089294698], [1.557481806E12, 0.11887436043206462], [1.557481884E12, 0.11791523611189257], [1.557481798E12, 0.11583594099240066], [1.557481888E12, 0.11276161024904728], [1.557481802E12, 0.11758560650029004], [1.557481929E12, 0.11516744004025264], [1.557481843E12, 0.11680911680911697], [1.55748188E12, 0.12758851035404067], [1.557481794E12, 0.1260872173234956], [1.557481921E12, 0.12218012241329126], [1.557481835E12, 0.11858757062146857], [1.557481925E12, 0.1259466170080689], [1.557481839E12, 0.11168568077620196]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.557481935E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.10324559161768539, "minX": 1.557481762E12, "maxY": 1.608247422680412, "series": [{"data": [[1.557481789E12, 0.1169437485766343], [1.557481916E12, 0.1242852843815824], [1.55748183E12, 0.11681091305095465], [1.55748192E12, 0.13209628235904697], [1.557481834E12, 0.11308704509166993], [1.557481875E12, 0.12768180979897864], [1.557481912E12, 0.11545352743561023], [1.557481826E12, 0.12289213655996702], [1.557481867E12, 0.10902275769745655], [1.557481871E12, 0.1087982832618029], [1.557481785E12, 0.12120851671226394], [1.557481863E12, 0.1096815696365389], [1.557481777E12, 0.11148131964168666], [1.557481781E12, 0.10683131897004733], [1.557481908E12, 0.10951661631419946], [1.557481822E12, 0.11201784451335552], [1.557481773E12, 0.11581527491504602], [1.5574819E12, 0.11998600746268658], [1.557481814E12, 0.1179830953074911], [1.557481904E12, 0.1273286308554884], [1.557481818E12, 0.11882903169928989], [1.557481859E12, 0.1057951839110877], [1.557481768E12, 0.15079424828728424], [1.557481895E12, 0.13163751987281422], [1.557481809E12, 0.11251302869054837], [1.557481813E12, 0.11057770989034954], [1.557481854E12, 0.1154636820465969], [1.557481805E12, 0.1243745101585576], [1.557481932E12, 0.11217772901810233], [1.557481846E12, 0.12356459330143567], [1.55748185E12, 0.1134038199181442], [1.557481764E12, 0.18848588365317007], [1.557481891E12, 0.12347239780868136], [1.557481928E12, 0.11658485273492314], [1.557481842E12, 0.10690623840568216], [1.557481883E12, 0.11687709950191047], [1.557481887E12, 0.1199185809828438], [1.557481801E12, 0.10976478973627943], [1.557481879E12, 0.1194498784753097], [1.557481793E12, 0.15022228596013218], [1.557481797E12, 0.11786435786435782], [1.557481924E12, 0.11016170028662617], [1.557481838E12, 0.10324559161768539], [1.557481874E12, 0.11479128856624335], [1.557481788E12, 0.11523426434762919], [1.557481915E12, 0.1220654493715909], [1.557481792E12, 0.115012457268671], [1.557481919E12, 0.12949148327738505], [1.557481833E12, 0.10753945061367613], [1.557481784E12, 0.10639091732850076], [1.557481911E12, 0.11765743517375163], [1.557481825E12, 0.11542952460383643], [1.557481829E12, 0.10582345191040853], [1.55748187E12, 0.11226715891928189], [1.557481821E12, 0.10613976103036252], [1.557481862E12, 0.11437174924719402], [1.557481866E12, 0.10608249077194665], [1.55748178E12, 0.11415268974028125], [1.557481907E12, 0.10542700010376707], [1.557481858E12, 0.11030556898125732], [1.557481772E12, 0.10794352231084299], [1.557481899E12, 0.11120722279288571], [1.557481776E12, 0.11101483808079747], [1.557481903E12, 0.12250596242219783], [1.557481817E12, 0.11378494138863864], [1.557481853E12, 0.10435187099441799], [1.557481767E12, 0.160965630114566], [1.557481894E12, 0.11953249513015785], [1.557481898E12, 0.10345889356461097], [1.557481812E12, 0.11371557054525008], [1.55748189E12, 0.12565348422412104], [1.557481804E12, 0.12220825100293368], [1.557481931E12, 0.10886252616887633], [1.557481808E12, 0.10934564388856055], [1.557481935E12, 0.11542558342209756], [1.557481849E12, 0.10838281709730906], [1.557481763E12, 0.3608712715855566], [1.5574818E12, 0.11785264122837229], [1.557481927E12, 0.12093873459519987], [1.557481841E12, 0.10931152448150534], [1.557481845E12, 0.11733504313359681], [1.557481886E12, 0.13477227468362615], [1.557481837E12, 0.10859945620301774], [1.557481878E12, 0.11494252873563213], [1.557481882E12, 0.10538176745184286], [1.557481796E12, 0.11612201682596002], [1.557481923E12, 0.1177226277372264], [1.557481832E12, 0.10374564912462998], [1.557481873E12, 0.11866279069767449], [1.557481787E12, 0.1251143780882084], [1.557481877E12, 0.11279668607254845], [1.557481791E12, 0.12470199889968861], [1.557481918E12, 0.12462156317577881], [1.557481869E12, 0.10797244620067314], [1.557481783E12, 0.1072393157866864], [1.55748191E12, 0.12731291443006038], [1.557481914E12, 0.11117229227465451], [1.557481828E12, 0.11582353943110224], [1.557481906E12, 0.11083757317139893], [1.55748182E12, 0.11828142029484302], [1.557481824E12, 0.10419229192291897], [1.557481865E12, 0.1116213151927433], [1.557481779E12, 0.10861643982424181], [1.557481816E12, 0.11947030590412297], [1.557481857E12, 0.11703172860197644], [1.557481771E12, 0.11770809315194822], [1.557481861E12, 0.10628120893561087], [1.557481775E12, 0.11565010750254615], [1.557481902E12, 0.12612668614409175], [1.557481852E12, 0.11230093355299273], [1.557481766E12, 0.16597121689517225], [1.557481856E12, 0.1184765647575568], [1.55748177E12, 0.1207010383530406], [1.557481897E12, 0.10400166736140067], [1.557481811E12, 0.11108699191403952], [1.557481848E12, 0.11989781106659626], [1.557481762E12, 1.608247422680412], [1.557481889E12, 0.10783998283998221], [1.557481803E12, 0.13357101929076212], [1.557481893E12, 0.11923503002740372], [1.557481807E12, 0.10930457179652227], [1.557481934E12, 0.10974106041923556], [1.557481885E12, 0.1369944097336401], [1.557481799E12, 0.11103910131777948], [1.557481926E12, 0.11762668821424445], [1.55748193E12, 0.12240351616593353], [1.557481844E12, 0.11846180819355963], [1.557481922E12, 0.1209518282066166], [1.557481836E12, 0.10407098121085584], [1.55748184E12, 0.11461205198897205], [1.557481881E12, 0.13245792962774092], [1.557481795E12, 0.1149130310806953], [1.557481917E12, 0.12776277013752368], [1.557481831E12, 0.11238519645671362], [1.557481876E12, 0.11754497599352146], [1.55748179E12, 0.13721817087040894], [1.557481868E12, 0.10844718515762031], [1.557481782E12, 0.11036952629008555], [1.557481872E12, 0.11082844818051096], [1.557481786E12, 0.12050579803041794], [1.557481913E12, 0.11220756181394884], [1.557481827E12, 0.1299417523856738], [1.557481864E12, 0.11014211886304925], [1.557481778E12, 0.10692645215211029], [1.557481905E12, 0.12051207448356113], [1.557481819E12, 0.10769069132170621], [1.557481909E12, 0.13073669591566064], [1.557481823E12, 0.10647854576199581], [1.557481901E12, 0.11931850996246063], [1.557481815E12, 0.14788683199441185], [1.55748186E12, 0.11187760778859522], [1.557481774E12, 0.11080949020033619], [1.557481896E12, 0.1140487587665588], [1.55748181E12, 0.11481211031848541], [1.557481851E12, 0.10638635043051066], [1.557481855E12, 0.12435982406458894], [1.557481769E12, 0.13077123162960108], [1.557481933E12, 0.10718273167100835], [1.557481847E12, 0.12281315605318449], [1.557481765E12, 0.18170509999043036], [1.557481892E12, 0.12893201420598568], [1.557481806E12, 0.11688459351904565], [1.557481884E12, 0.11611414419992101], [1.557481798E12, 0.11427134555207935], [1.557481888E12, 0.11165718703407157], [1.557481802E12, 0.11584445734184552], [1.557481929E12, 0.11326661821434528], [1.557481843E12, 0.11485391877548694], [1.55748188E12, 0.1255845023380095], [1.557481794E12, 0.12368784116129818], [1.557481921E12, 0.11938210434275777], [1.557481835E12, 0.1171751412429376], [1.557481925E12, 0.12389819987585368], [1.557481839E12, 0.10971318903934289]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.557481935E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.007137192704203, "minX": 1.557481762E12, "maxY": 0.5670103092783505, "series": [{"data": [[1.557481789E12, 0.009792757913914851], [1.557481916E12, 0.010291904905206104], [1.55748183E12, 0.00928526394222494], [1.55748192E12, 0.010445727632518031], [1.557481834E12, 0.008148433628805822], [1.557481875E12, 0.009467019118460616], [1.557481912E12, 0.010246360582306864], [1.557481826E12, 0.009703567836222728], [1.557481867E12, 0.0074966532797858315], [1.557481871E12, 0.007296137339055777], [1.557481785E12, 0.011716426787201101], [1.557481863E12, 0.007719523962689015], [1.557481777E12, 0.009230937295171453], [1.557481781E12, 0.00803993694167105], [1.557481908E12, 0.007498921018558462], [1.557481822E12, 0.008160600620205615], [1.557481773E12, 0.008021837223552984], [1.5574819E12, 0.009211753731343246], [1.557481814E12, 0.008918682599825154], [1.557481904E12, 0.009585820220654798], [1.557481818E12, 0.00860326808707194], [1.557481859E12, 0.008414924583223123], [1.557481768E12, 0.013325303018896353], [1.557481895E12, 0.009538950715421272], [1.557481809E12, 0.009490372483405556], [1.557481813E12, 0.008455621624570368], [1.557481854E12, 0.00936500685244404], [1.557481805E12, 0.008319768493398452], [1.557481932E12, 0.008173340647284689], [1.557481846E12, 0.008193779904306229], [1.55748185E12, 0.010629831741700776], [1.557481764E12, 0.016678388425600387], [1.557481891E12, 0.00909036180844016], [1.557481928E12, 0.008765778401121983], [1.557481842E12, 0.008003392166216181], [1.557481883E12, 0.008629676821498927], [1.557481887E12, 0.010468159348647879], [1.557481801E12, 0.009265858873841772], [1.557481879E12, 0.009721975220819244], [1.557481793E12, 0.010182131077011321], [1.557481797E12, 0.009119769119769121], [1.557481924E12, 0.0076794116056460105], [1.557481838E12, 0.008177868642984863], [1.557481874E12, 0.00901769509981851], [1.557481788E12, 0.009347912299586382], [1.557481915E12, 0.009900403130187323], [1.557481792E12, 0.009560229445506645], [1.557481919E12, 0.010257366654233544], [1.557481833E12, 0.009244992295839761], [1.557481784E12, 0.00826181973242369], [1.557481911E12, 0.009172693596754253], [1.557481825E12, 0.009118710036141217], [1.557481829E12, 0.008748353096179213], [1.55748187E12, 0.009341612127314452], [1.557481821E12, 0.007758754461283834], [1.557481862E12, 0.008267177662195455], [1.557481866E12, 0.007810410314021299], [1.55748178E12, 0.008526392550625346], [1.557481907E12, 0.008197571858462104], [1.557481858E12, 0.008431340959132193], [1.557481772E12, 0.008622547962923006], [1.557481899E12, 0.007298480834729973], [1.557481776E12, 0.007798115455431632], [1.557481903E12, 0.00831830609039622], [1.557481817E12, 0.009017132551848486], [1.557481853E12, 0.008683068017366142], [1.557481767E12, 0.013175122749590885], [1.557481894E12, 0.008204946579304644], [1.557481898E12, 0.008570255568100182], [1.557481812E12, 0.00837549184935356], [1.55748189E12, 0.008733624454148462], [1.557481804E12, 0.00844260822705227], [1.557481931E12, 0.007890922754844624], [1.557481808E12, 0.008642439207687017], [1.557481935E12, 0.008037184080565517], [1.557481849E12, 0.008773337613010202], [1.557481763E12, 0.0398351648351649], [1.5574818E12, 0.008708605477254532], [1.557481927E12, 0.008903826876584696], [1.557481841E12, 0.0076437887534744646], [1.557481845E12, 0.009151317323385384], [1.557481886E12, 0.011241729299158483], [1.557481837E12, 0.007517193581063068], [1.557481878E12, 0.00924047780031548], [1.557481882E12, 0.008746042818050127], [1.557481796E12, 0.007497281520059523], [1.557481923E12, 0.010277372262773683], [1.557481832E12, 0.008467972362200683], [1.557481873E12, 0.010232558139534892], [1.557481787E12, 0.007137192704203], [1.557481877E12, 0.008732646663681147], [1.557481791E12, 0.009658292071642486], [1.557481918E12, 0.010503552672227377], [1.557481869E12, 0.008170021893522707], [1.557481783E12, 0.008473229889318461], [1.55748191E12, 0.009914745816229904], [1.557481914E12, 0.008755024503056066], [1.557481828E12, 0.009140975415885986], [1.557481906E12, 0.008753214070791675], [1.55748182E12, 0.008145471232719562], [1.557481824E12, 0.007687576875768771], [1.557481865E12, 0.00935374149659863], [1.557481779E12, 0.008466402314864402], [1.557481816E12, 0.008558376221592563], [1.557481857E12, 0.009709298965497331], [1.557481771E12, 0.007954807470601809], [1.557481861E12, 0.007253613666228627], [1.557481775E12, 0.00871336426389048], [1.557481902E12, 0.01050537701249457], [1.557481852E12, 0.008786381109280636], [1.557481766E12, 0.014136081069573404], [1.557481856E12, 0.00849563659481016], [1.55748177E12, 0.009783326330952477], [1.557481897E12, 0.008753647353063781], [1.557481811E12, 0.009279861073424878], [1.557481848E12, 0.009289903036637034], [1.557481762E12, 0.5670103092783505], [1.557481889E12, 0.007990132990132983], [1.557481803E12, 0.009231552810848647], [1.557481893E12, 0.010145181039006456], [1.557481807E12, 0.008907490877870801], [1.557481934E12, 0.009489090226773212], [1.557481885E12, 0.010457086484708967], [1.557481799E12, 0.007290991574854156], [1.557481926E12, 0.009350109661780053], [1.55748193E12, 0.009994581251128882], [1.557481844E12, 0.009876687510957797], [1.557481922E12, 0.009402205455600715], [1.557481836E12, 0.008455114822546954], [1.55748184E12, 0.009621335733978434], [1.557481881E12, 0.01134625191228966], [1.557481795E12, 0.009238665526090671], [1.557481917E12, 0.009516208251473519], [1.557481831E12, 0.00847780011955873], [1.557481876E12, 0.008966275235726294], [1.55748179E12, 0.010972101425035094], [1.557481868E12, 0.008080378501940353], [1.557481782E12, 0.008899017852297957], [1.557481872E12, 0.008129631677911737], [1.557481786E12, 0.009847910960899741], [1.557481913E12, 0.00887016298924495], [1.557481827E12, 0.009418763167678744], [1.557481864E12, 0.007913436692506463], [1.557481778E12, 0.007574174676138738], [1.557481905E12, 0.007797497817864425], [1.557481819E12, 0.007827274637528964], [1.557481909E12, 0.009721608484312813], [1.557481823E12, 0.00856055802155992], [1.557481901E12, 0.008720762344787757], [1.557481815E12, 0.012015368494586037], [1.55748186E12, 0.00823365785813632], [1.557481774E12, 0.008360931646669227], [1.557481896E12, 0.007848157631080968], [1.55748181E12, 0.008931079031623865], [1.557481851E12, 0.007712218055041968], [1.557481855E12, 0.00915828161715969], [1.557481769E12, 0.01183508908830801], [1.557481933E12, 0.008825562230846924], [1.557481847E12, 0.008980639141590849], [1.557481765E12, 0.015500909003923159], [1.557481892E12, 0.009703196347031906], [1.557481806E12, 0.00938032973280266], [1.557481884E12, 0.008724038948612624], [1.557481798E12, 0.009331694233348271], [1.557481888E12, 0.008724943398310233], [1.557481802E12, 0.009170052234474708], [1.557481929E12, 0.009336389556661226], [1.557481843E12, 0.008547008547008518], [1.55748188E12, 0.01074877026780834], [1.557481794E12, 0.010977145942055084], [1.557481921E12, 0.009268434858641825], [1.557481835E12, 0.0098870056497175], [1.557481925E12, 0.010304158907510847], [1.557481839E12, 0.008583004584710481]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.557481935E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.557481762E12, "maxY": 84.0, "series": [{"data": [[1.557481789E12, 5.0], [1.557481916E12, 6.0], [1.55748183E12, 6.0], [1.55748192E12, 9.0], [1.557481834E12, 5.0], [1.557481875E12, 6.0], [1.557481912E12, 7.0], [1.557481826E12, 7.0], [1.557481867E12, 4.0], [1.557481871E12, 4.0], [1.557481785E12, 8.0], [1.557481863E12, 5.0], [1.557481777E12, 6.0], [1.557481781E12, 5.0], [1.557481908E12, 4.0], [1.557481822E12, 6.0], [1.557481773E12, 5.0], [1.5574819E12, 5.0], [1.557481814E12, 5.0], [1.557481904E12, 3.0], [1.557481818E12, 4.0], [1.557481859E12, 5.0], [1.557481768E12, 17.0], [1.557481895E12, 6.0], [1.557481809E12, 9.0], [1.557481813E12, 6.0], [1.557481854E12, 6.0], [1.557481805E12, 9.0], [1.557481932E12, 4.0], [1.557481846E12, 4.0], [1.55748185E12, 26.0], [1.557481764E12, 11.0], [1.557481891E12, 7.0], [1.557481928E12, 6.0], [1.557481842E12, 3.0], [1.557481883E12, 7.0], [1.557481887E12, 4.0], [1.557481801E12, 4.0], [1.557481879E12, 4.0], [1.557481793E12, 84.0], [1.557481797E12, 5.0], [1.557481924E12, 5.0], [1.557481838E12, 4.0], [1.557481874E12, 14.0], [1.557481788E12, 4.0], [1.557481915E12, 5.0], [1.557481792E12, 8.0], [1.557481919E12, 10.0], [1.557481833E12, 3.0], [1.557481784E12, 4.0], [1.557481911E12, 8.0], [1.557481825E12, 6.0], [1.557481829E12, 5.0], [1.55748187E12, 6.0], [1.557481821E12, 4.0], [1.557481862E12, 5.0], [1.557481866E12, 5.0], [1.55748178E12, 6.0], [1.557481907E12, 4.0], [1.557481858E12, 4.0], [1.557481772E12, 5.0], [1.557481899E12, 4.0], [1.557481776E12, 4.0], [1.557481903E12, 6.0], [1.557481817E12, 5.0], [1.557481853E12, 4.0], [1.557481767E12, 10.0], [1.557481894E12, 5.0], [1.557481898E12, 3.0], [1.557481812E12, 5.0], [1.55748189E12, 9.0], [1.557481804E12, 6.0], [1.557481931E12, 5.0], [1.557481808E12, 4.0], [1.557481935E12, 7.0], [1.557481849E12, 3.0], [1.557481763E12, 10.0], [1.5574818E12, 8.0], [1.557481927E12, 8.0], [1.557481841E12, 5.0], [1.557481845E12, 6.0], [1.557481886E12, 7.0], [1.557481837E12, 4.0], [1.557481878E12, 5.0], [1.557481882E12, 4.0], [1.557481796E12, 5.0], [1.557481923E12, 7.0], [1.557481832E12, 4.0], [1.557481873E12, 5.0], [1.557481787E12, 7.0], [1.557481877E12, 4.0], [1.557481791E12, 6.0], [1.557481918E12, 6.0], [1.557481869E12, 4.0], [1.557481783E12, 4.0], [1.55748191E12, 6.0], [1.557481914E12, 3.0], [1.557481828E12, 6.0], [1.557481906E12, 6.0], [1.55748182E12, 6.0], [1.557481824E12, 3.0], [1.557481865E12, 5.0], [1.557481779E12, 3.0], [1.557481816E12, 6.0], [1.557481857E12, 5.0], [1.557481771E12, 9.0], [1.557481861E12, 5.0], [1.557481775E12, 8.0], [1.557481902E12, 8.0], [1.557481852E12, 4.0], [1.557481766E12, 11.0], [1.557481856E12, 6.0], [1.55748177E12, 13.0], [1.557481897E12, 6.0], [1.557481811E12, 4.0], [1.557481848E12, 6.0], [1.557481762E12, 31.0], [1.557481889E12, 4.0], [1.557481803E12, 8.0], [1.557481893E12, 7.0], [1.557481807E12, 6.0], [1.557481934E12, 4.0], [1.557481885E12, 24.0], [1.557481799E12, 4.0], [1.557481926E12, 4.0], [1.55748193E12, 7.0], [1.557481844E12, 11.0], [1.557481922E12, 5.0], [1.557481836E12, 5.0], [1.55748184E12, 5.0], [1.557481881E12, 5.0], [1.557481795E12, 7.0], [1.557481917E12, 6.0], [1.557481831E12, 5.0], [1.557481876E12, 4.0], [1.55748179E12, 9.0], [1.557481868E12, 6.0], [1.557481782E12, 4.0], [1.557481872E12, 5.0], [1.557481786E12, 8.0], [1.557481913E12, 7.0], [1.557481827E12, 6.0], [1.557481864E12, 5.0], [1.557481778E12, 3.0], [1.557481905E12, 6.0], [1.557481819E12, 5.0], [1.557481909E12, 6.0], [1.557481823E12, 5.0], [1.557481901E12, 6.0], [1.557481815E12, 8.0], [1.55748186E12, 5.0], [1.557481774E12, 3.0], [1.557481896E12, 5.0], [1.55748181E12, 5.0], [1.557481851E12, 4.0], [1.557481855E12, 9.0], [1.557481769E12, 11.0], [1.557481933E12, 5.0], [1.557481847E12, 5.0], [1.557481765E12, 15.0], [1.557481892E12, 7.0], [1.557481806E12, 5.0], [1.557481884E12, 8.0], [1.557481798E12, 4.0], [1.557481888E12, 4.0], [1.557481802E12, 5.0], [1.557481929E12, 5.0], [1.557481843E12, 4.0], [1.55748188E12, 5.0], [1.557481794E12, 4.0], [1.557481921E12, 5.0], [1.557481835E12, 6.0], [1.557481925E12, 5.0], [1.557481839E12, 4.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.557481789E12, 0.0], [1.557481916E12, 0.0], [1.55748183E12, 0.0], [1.55748192E12, 0.0], [1.557481834E12, 0.0], [1.557481875E12, 0.0], [1.557481912E12, 0.0], [1.557481826E12, 0.0], [1.557481867E12, 0.0], [1.557481871E12, 0.0], [1.557481785E12, 0.0], [1.557481863E12, 0.0], [1.557481777E12, 0.0], [1.557481781E12, 0.0], [1.557481908E12, 0.0], [1.557481822E12, 0.0], [1.557481773E12, 0.0], [1.5574819E12, 0.0], [1.557481814E12, 0.0], [1.557481904E12, 0.0], [1.557481818E12, 0.0], [1.557481859E12, 0.0], [1.557481768E12, 0.0], [1.557481895E12, 0.0], [1.557481809E12, 0.0], [1.557481813E12, 0.0], [1.557481854E12, 0.0], [1.557481805E12, 0.0], [1.557481932E12, 0.0], [1.557481846E12, 0.0], [1.55748185E12, 0.0], [1.557481764E12, 0.0], [1.557481891E12, 0.0], [1.557481928E12, 0.0], [1.557481842E12, 0.0], [1.557481883E12, 0.0], [1.557481887E12, 0.0], [1.557481801E12, 0.0], [1.557481879E12, 0.0], [1.557481793E12, 0.0], [1.557481797E12, 0.0], [1.557481924E12, 0.0], [1.557481838E12, 0.0], [1.557481874E12, 0.0], [1.557481788E12, 0.0], [1.557481915E12, 0.0], [1.557481792E12, 0.0], [1.557481919E12, 0.0], [1.557481833E12, 0.0], [1.557481784E12, 0.0], [1.557481911E12, 0.0], [1.557481825E12, 0.0], [1.557481829E12, 0.0], [1.55748187E12, 0.0], [1.557481821E12, 0.0], [1.557481862E12, 0.0], [1.557481866E12, 0.0], [1.55748178E12, 0.0], [1.557481907E12, 0.0], [1.557481858E12, 0.0], [1.557481772E12, 0.0], [1.557481899E12, 0.0], [1.557481776E12, 0.0], [1.557481903E12, 0.0], [1.557481817E12, 0.0], [1.557481853E12, 0.0], [1.557481767E12, 0.0], [1.557481894E12, 0.0], [1.557481898E12, 0.0], [1.557481812E12, 0.0], [1.55748189E12, 0.0], [1.557481804E12, 0.0], [1.557481931E12, 0.0], [1.557481808E12, 0.0], [1.557481935E12, 0.0], [1.557481849E12, 0.0], [1.557481763E12, 0.0], [1.5574818E12, 0.0], [1.557481927E12, 0.0], [1.557481841E12, 0.0], [1.557481845E12, 0.0], [1.557481886E12, 0.0], [1.557481837E12, 0.0], [1.557481878E12, 0.0], [1.557481882E12, 0.0], [1.557481796E12, 0.0], [1.557481923E12, 0.0], [1.557481832E12, 0.0], [1.557481873E12, 0.0], [1.557481787E12, 0.0], [1.557481877E12, 0.0], [1.557481791E12, 0.0], [1.557481918E12, 0.0], [1.557481869E12, 0.0], [1.557481783E12, 0.0], [1.55748191E12, 0.0], [1.557481914E12, 0.0], [1.557481828E12, 0.0], [1.557481906E12, 0.0], [1.55748182E12, 0.0], [1.557481824E12, 0.0], [1.557481865E12, 0.0], [1.557481779E12, 0.0], [1.557481816E12, 0.0], [1.557481857E12, 0.0], [1.557481771E12, 0.0], [1.557481861E12, 0.0], [1.557481775E12, 0.0], [1.557481902E12, 0.0], [1.557481852E12, 0.0], [1.557481766E12, 0.0], [1.557481856E12, 0.0], [1.55748177E12, 0.0], [1.557481897E12, 0.0], [1.557481811E12, 0.0], [1.557481848E12, 0.0], [1.557481762E12, 0.0], [1.557481889E12, 0.0], [1.557481803E12, 0.0], [1.557481893E12, 0.0], [1.557481807E12, 0.0], [1.557481934E12, 0.0], [1.557481885E12, 0.0], [1.557481799E12, 0.0], [1.557481926E12, 0.0], [1.55748193E12, 0.0], [1.557481844E12, 0.0], [1.557481922E12, 0.0], [1.557481836E12, 0.0], [1.55748184E12, 0.0], [1.557481881E12, 0.0], [1.557481795E12, 0.0], [1.557481917E12, 0.0], [1.557481831E12, 0.0], [1.557481876E12, 0.0], [1.55748179E12, 0.0], [1.557481868E12, 0.0], [1.557481782E12, 0.0], [1.557481872E12, 0.0], [1.557481786E12, 0.0], [1.557481913E12, 0.0], [1.557481827E12, 0.0], [1.557481864E12, 0.0], [1.557481778E12, 0.0], [1.557481905E12, 0.0], [1.557481819E12, 0.0], [1.557481909E12, 0.0], [1.557481823E12, 0.0], [1.557481901E12, 0.0], [1.557481815E12, 0.0], [1.55748186E12, 0.0], [1.557481774E12, 0.0], [1.557481896E12, 0.0], [1.55748181E12, 0.0], [1.557481851E12, 0.0], [1.557481855E12, 0.0], [1.557481769E12, 0.0], [1.557481933E12, 0.0], [1.557481847E12, 0.0], [1.557481765E12, 0.0], [1.557481892E12, 0.0], [1.557481806E12, 0.0], [1.557481884E12, 0.0], [1.557481798E12, 0.0], [1.557481888E12, 0.0], [1.557481802E12, 0.0], [1.557481929E12, 0.0], [1.557481843E12, 0.0], [1.55748188E12, 0.0], [1.557481794E12, 0.0], [1.557481921E12, 0.0], [1.557481835E12, 0.0], [1.557481925E12, 0.0], [1.557481839E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.557481789E12, 1.0], [1.557481916E12, 1.0], [1.55748183E12, 1.0], [1.55748192E12, 1.0], [1.557481834E12, 1.0], [1.557481875E12, 1.0], [1.557481912E12, 1.0], [1.557481826E12, 1.0], [1.557481867E12, 1.0], [1.557481871E12, 1.0], [1.557481785E12, 1.0], [1.557481863E12, 1.0], [1.557481777E12, 1.0], [1.557481781E12, 1.0], [1.557481908E12, 1.0], [1.557481822E12, 1.0], [1.557481773E12, 1.0], [1.5574819E12, 1.0], [1.557481814E12, 1.0], [1.557481904E12, 1.0], [1.557481818E12, 1.0], [1.557481859E12, 1.0], [1.557481768E12, 1.0], [1.557481895E12, 1.0], [1.557481809E12, 1.0], [1.557481813E12, 1.0], [1.557481854E12, 1.0], [1.557481805E12, 1.0], [1.557481932E12, 1.0], [1.557481846E12, 1.0], [1.55748185E12, 1.0], [1.557481764E12, 1.0], [1.557481891E12, 1.0], [1.557481928E12, 1.0], [1.557481842E12, 1.0], [1.557481883E12, 1.0], [1.557481887E12, 1.0], [1.557481801E12, 1.0], [1.557481879E12, 1.0], [1.557481793E12, 1.0], [1.557481797E12, 1.0], [1.557481924E12, 1.0], [1.557481838E12, 1.0], [1.557481874E12, 1.0], [1.557481788E12, 1.0], [1.557481915E12, 1.0], [1.557481792E12, 1.0], [1.557481919E12, 1.0], [1.557481833E12, 1.0], [1.557481784E12, 1.0], [1.557481911E12, 1.0], [1.557481825E12, 1.0], [1.557481829E12, 1.0], [1.55748187E12, 1.0], [1.557481821E12, 1.0], [1.557481862E12, 1.0], [1.557481866E12, 1.0], [1.55748178E12, 1.0], [1.557481907E12, 1.0], [1.557481858E12, 1.0], [1.557481772E12, 1.0], [1.557481899E12, 1.0], [1.557481776E12, 1.0], [1.557481903E12, 1.0], [1.557481817E12, 1.0], [1.557481853E12, 1.0], [1.557481767E12, 1.0], [1.557481894E12, 1.0], [1.557481898E12, 1.0], [1.557481812E12, 1.0], [1.55748189E12, 1.0], [1.557481804E12, 1.0], [1.557481931E12, 1.0], [1.557481808E12, 1.0], [1.557481935E12, 1.0], [1.557481849E12, 1.0], [1.557481763E12, 1.0], [1.5574818E12, 1.0], [1.557481927E12, 1.0], [1.557481841E12, 1.0], [1.557481845E12, 1.0], [1.557481886E12, 1.0], [1.557481837E12, 1.0], [1.557481878E12, 1.0], [1.557481882E12, 1.0], [1.557481796E12, 1.0], [1.557481923E12, 1.0], [1.557481832E12, 1.0], [1.557481873E12, 1.0], [1.557481787E12, 1.0], [1.557481877E12, 1.0], [1.557481791E12, 1.0], [1.557481918E12, 1.0], [1.557481869E12, 1.0], [1.557481783E12, 1.0], [1.55748191E12, 1.0], [1.557481914E12, 1.0], [1.557481828E12, 1.0], [1.557481906E12, 1.0], [1.55748182E12, 1.0], [1.557481824E12, 1.0], [1.557481865E12, 1.0], [1.557481779E12, 1.0], [1.557481816E12, 1.0], [1.557481857E12, 1.0], [1.557481771E12, 1.0], [1.557481861E12, 1.0], [1.557481775E12, 1.0], [1.557481902E12, 1.0], [1.557481852E12, 1.0], [1.557481766E12, 1.0], [1.557481856E12, 1.0], [1.55748177E12, 1.0], [1.557481897E12, 1.0], [1.557481811E12, 1.0], [1.557481848E12, 1.0], [1.557481762E12, 1.0], [1.557481889E12, 1.0], [1.557481803E12, 1.0], [1.557481893E12, 1.0], [1.557481807E12, 1.0], [1.557481934E12, 1.0], [1.557481885E12, 1.0], [1.557481799E12, 1.0], [1.557481926E12, 1.0], [1.55748193E12, 1.0], [1.557481844E12, 1.0], [1.557481922E12, 1.0], [1.557481836E12, 1.0], [1.55748184E12, 1.0], [1.557481881E12, 1.0], [1.557481795E12, 1.0], [1.557481917E12, 1.0], [1.557481831E12, 1.0], [1.557481876E12, 1.0], [1.55748179E12, 1.0], [1.557481868E12, 1.0], [1.557481782E12, 1.0], [1.557481872E12, 1.0], [1.557481786E12, 1.0], [1.557481913E12, 1.0], [1.557481827E12, 1.0], [1.557481864E12, 1.0], [1.557481778E12, 1.0], [1.557481905E12, 1.0], [1.557481819E12, 1.0], [1.557481909E12, 1.0], [1.557481823E12, 1.0], [1.557481901E12, 1.0], [1.557481815E12, 1.0], [1.55748186E12, 1.0], [1.557481774E12, 1.0], [1.557481896E12, 1.0], [1.55748181E12, 1.0], [1.557481851E12, 1.0], [1.557481855E12, 1.0], [1.557481769E12, 1.0], [1.557481933E12, 1.0], [1.557481847E12, 1.0], [1.557481765E12, 1.0], [1.557481892E12, 1.0], [1.557481806E12, 1.0], [1.557481884E12, 1.0], [1.557481798E12, 1.0], [1.557481888E12, 1.0], [1.557481802E12, 1.0], [1.557481929E12, 1.0], [1.557481843E12, 1.0], [1.55748188E12, 1.0], [1.557481794E12, 1.0], [1.557481921E12, 1.0], [1.557481835E12, 1.0], [1.557481925E12, 1.0], [1.557481839E12, 1.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.557481789E12, 1.0], [1.557481916E12, 1.0], [1.55748183E12, 1.0], [1.55748192E12, 1.0], [1.557481834E12, 1.0], [1.557481875E12, 1.0], [1.557481912E12, 1.0], [1.557481826E12, 1.0], [1.557481867E12, 1.0], [1.557481871E12, 1.0], [1.557481785E12, 1.0], [1.557481863E12, 1.0], [1.557481777E12, 1.0], [1.557481781E12, 1.0], [1.557481908E12, 1.0], [1.557481822E12, 1.0], [1.557481773E12, 1.0], [1.5574819E12, 1.0], [1.557481814E12, 1.0], [1.557481904E12, 1.0], [1.557481818E12, 1.0], [1.557481859E12, 1.0], [1.557481768E12, 1.0], [1.557481895E12, 1.0], [1.557481809E12, 1.0], [1.557481813E12, 1.0], [1.557481854E12, 1.0], [1.557481805E12, 1.0], [1.557481932E12, 1.0], [1.557481846E12, 1.0], [1.55748185E12, 1.0], [1.557481764E12, 1.0], [1.557481891E12, 1.0], [1.557481928E12, 1.0], [1.557481842E12, 1.0], [1.557481883E12, 1.0], [1.557481887E12, 1.0], [1.557481801E12, 1.0], [1.557481879E12, 1.0], [1.557481793E12, 1.0], [1.557481797E12, 1.0], [1.557481924E12, 1.0], [1.557481838E12, 1.0], [1.557481874E12, 1.0], [1.557481788E12, 1.0], [1.557481915E12, 1.0], [1.557481792E12, 1.0], [1.557481919E12, 1.0], [1.557481833E12, 1.0], [1.557481784E12, 1.0], [1.557481911E12, 1.0], [1.557481825E12, 1.0], [1.557481829E12, 1.0], [1.55748187E12, 1.0], [1.557481821E12, 1.0], [1.557481862E12, 1.0], [1.557481866E12, 1.0], [1.55748178E12, 1.0], [1.557481907E12, 1.0], [1.557481858E12, 1.0], [1.557481772E12, 1.0], [1.557481899E12, 1.0], [1.557481776E12, 1.0], [1.557481903E12, 1.0], [1.557481817E12, 1.0], [1.557481853E12, 1.0], [1.557481767E12, 1.0], [1.557481894E12, 1.0], [1.557481898E12, 1.0], [1.557481812E12, 1.0], [1.55748189E12, 1.0], [1.557481804E12, 1.0], [1.557481931E12, 1.0], [1.557481808E12, 1.0], [1.557481935E12, 1.0], [1.557481849E12, 1.0], [1.557481763E12, 1.0], [1.5574818E12, 1.0], [1.557481927E12, 1.0], [1.557481841E12, 1.0], [1.557481845E12, 1.0], [1.557481886E12, 1.0], [1.557481837E12, 1.0], [1.557481878E12, 1.0], [1.557481882E12, 1.0], [1.557481796E12, 1.0], [1.557481923E12, 1.0], [1.557481832E12, 1.0], [1.557481873E12, 1.0], [1.557481787E12, 1.0], [1.557481877E12, 1.0], [1.557481791E12, 1.0], [1.557481918E12, 1.0], [1.557481869E12, 1.0], [1.557481783E12, 1.0], [1.55748191E12, 1.0], [1.557481914E12, 1.0], [1.557481828E12, 1.0], [1.557481906E12, 1.0], [1.55748182E12, 1.0], [1.557481824E12, 1.0], [1.557481865E12, 1.0], [1.557481779E12, 1.0], [1.557481816E12, 1.0], [1.557481857E12, 1.0], [1.557481771E12, 1.0], [1.557481861E12, 1.0], [1.557481775E12, 1.0], [1.557481902E12, 1.0], [1.557481852E12, 1.0], [1.557481766E12, 1.0], [1.557481856E12, 1.0], [1.55748177E12, 1.0], [1.557481897E12, 1.0], [1.557481811E12, 1.0], [1.557481848E12, 1.0], [1.557481762E12, 31.0], [1.557481889E12, 1.0], [1.557481803E12, 1.0], [1.557481893E12, 1.0], [1.557481807E12, 1.0], [1.557481934E12, 1.0], [1.557481885E12, 1.0], [1.557481799E12, 1.0], [1.557481926E12, 1.0], [1.55748193E12, 1.0], [1.557481844E12, 1.0], [1.557481922E12, 1.0], [1.557481836E12, 1.0], [1.55748184E12, 1.0], [1.557481881E12, 1.0], [1.557481795E12, 1.0], [1.557481917E12, 1.0], [1.557481831E12, 1.0], [1.557481876E12, 1.0], [1.55748179E12, 1.0], [1.557481868E12, 1.0], [1.557481782E12, 1.0], [1.557481872E12, 1.0], [1.557481786E12, 1.0], [1.557481913E12, 1.0], [1.557481827E12, 1.0], [1.557481864E12, 1.0], [1.557481778E12, 1.0], [1.557481905E12, 1.0], [1.557481819E12, 1.0], [1.557481909E12, 1.0], [1.557481823E12, 1.0], [1.557481901E12, 1.0], [1.557481815E12, 1.0], [1.55748186E12, 1.0], [1.557481774E12, 1.0], [1.557481896E12, 1.0], [1.55748181E12, 1.0], [1.557481851E12, 1.0], [1.557481855E12, 1.0], [1.557481769E12, 1.0], [1.557481933E12, 1.0], [1.557481847E12, 1.0], [1.557481765E12, 1.0], [1.557481892E12, 1.0], [1.557481806E12, 1.0], [1.557481884E12, 1.0], [1.557481798E12, 1.0], [1.557481888E12, 1.0], [1.557481802E12, 1.0], [1.557481929E12, 1.0], [1.557481843E12, 1.0], [1.55748188E12, 1.0], [1.557481794E12, 1.0], [1.557481921E12, 1.0], [1.557481835E12, 1.0], [1.557481925E12, 1.0], [1.557481839E12, 1.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.557481789E12, 1.0], [1.557481916E12, 1.0], [1.55748183E12, 1.0], [1.55748192E12, 1.0], [1.557481834E12, 1.0], [1.557481875E12, 1.0], [1.557481912E12, 1.0], [1.557481826E12, 1.0], [1.557481867E12, 1.0], [1.557481871E12, 1.0], [1.557481785E12, 1.0], [1.557481863E12, 1.0], [1.557481777E12, 1.0], [1.557481781E12, 1.0], [1.557481908E12, 1.0], [1.557481822E12, 1.0], [1.557481773E12, 1.0], [1.5574819E12, 1.0], [1.557481814E12, 1.0], [1.557481904E12, 1.0], [1.557481818E12, 1.0], [1.557481859E12, 1.0], [1.557481768E12, 1.0], [1.557481895E12, 1.0], [1.557481809E12, 1.0], [1.557481813E12, 1.0], [1.557481854E12, 1.0], [1.557481805E12, 1.0], [1.557481932E12, 1.0], [1.557481846E12, 1.0], [1.55748185E12, 1.0], [1.557481764E12, 1.0], [1.557481891E12, 1.0], [1.557481928E12, 1.0], [1.557481842E12, 1.0], [1.557481883E12, 1.0], [1.557481887E12, 1.0], [1.557481801E12, 1.0], [1.557481879E12, 1.0], [1.557481793E12, 1.0], [1.557481797E12, 1.0], [1.557481924E12, 1.0], [1.557481838E12, 1.0], [1.557481874E12, 1.0], [1.557481788E12, 1.0], [1.557481915E12, 1.0], [1.557481792E12, 1.0], [1.557481919E12, 1.0], [1.557481833E12, 1.0], [1.557481784E12, 1.0], [1.557481911E12, 1.0], [1.557481825E12, 1.0], [1.557481829E12, 1.0], [1.55748187E12, 1.0], [1.557481821E12, 1.0], [1.557481862E12, 1.0], [1.557481866E12, 1.0], [1.55748178E12, 1.0], [1.557481907E12, 1.0], [1.557481858E12, 1.0], [1.557481772E12, 1.0], [1.557481899E12, 1.0], [1.557481776E12, 1.0], [1.557481903E12, 1.0], [1.557481817E12, 1.0], [1.557481853E12, 1.0], [1.557481767E12, 1.0], [1.557481894E12, 1.0], [1.557481898E12, 1.0], [1.557481812E12, 1.0], [1.55748189E12, 1.0], [1.557481804E12, 1.0], [1.557481931E12, 1.0], [1.557481808E12, 1.0], [1.557481935E12, 1.0], [1.557481849E12, 1.0], [1.557481763E12, 1.0], [1.5574818E12, 1.0], [1.557481927E12, 1.0], [1.557481841E12, 1.0], [1.557481845E12, 1.0], [1.557481886E12, 1.0], [1.557481837E12, 1.0], [1.557481878E12, 1.0], [1.557481882E12, 1.0], [1.557481796E12, 1.0], [1.557481923E12, 1.0], [1.557481832E12, 1.0], [1.557481873E12, 1.0], [1.557481787E12, 1.0], [1.557481877E12, 1.0], [1.557481791E12, 1.0], [1.557481918E12, 1.0], [1.557481869E12, 1.0], [1.557481783E12, 1.0], [1.55748191E12, 1.0], [1.557481914E12, 1.0], [1.557481828E12, 1.0], [1.557481906E12, 1.0], [1.55748182E12, 1.0], [1.557481824E12, 1.0], [1.557481865E12, 1.0], [1.557481779E12, 1.0], [1.557481816E12, 1.0], [1.557481857E12, 1.0], [1.557481771E12, 1.0], [1.557481861E12, 1.0], [1.557481775E12, 1.0], [1.557481902E12, 1.0], [1.557481852E12, 1.0], [1.557481766E12, 1.0], [1.557481856E12, 1.0], [1.55748177E12, 1.0], [1.557481897E12, 1.0], [1.557481811E12, 1.0], [1.557481848E12, 1.0], [1.557481762E12, 1.4999999999999716], [1.557481889E12, 1.0], [1.557481803E12, 1.0], [1.557481893E12, 1.0], [1.557481807E12, 1.0], [1.557481934E12, 1.0], [1.557481885E12, 1.0], [1.557481799E12, 1.0], [1.557481926E12, 1.0], [1.55748193E12, 1.0], [1.557481844E12, 1.0], [1.557481922E12, 1.0], [1.557481836E12, 1.0], [1.55748184E12, 1.0], [1.557481881E12, 1.0], [1.557481795E12, 1.0], [1.557481917E12, 1.0], [1.557481831E12, 1.0], [1.557481876E12, 1.0], [1.55748179E12, 1.0], [1.557481868E12, 1.0], [1.557481782E12, 1.0], [1.557481872E12, 1.0], [1.557481786E12, 1.0], [1.557481913E12, 1.0], [1.557481827E12, 1.0], [1.557481864E12, 1.0], [1.557481778E12, 1.0], [1.557481905E12, 1.0], [1.557481819E12, 1.0], [1.557481909E12, 1.0], [1.557481823E12, 1.0], [1.557481901E12, 1.0], [1.557481815E12, 1.0], [1.55748186E12, 1.0], [1.557481774E12, 1.0], [1.557481896E12, 1.0], [1.55748181E12, 1.0], [1.557481851E12, 1.0], [1.557481855E12, 1.0], [1.557481769E12, 1.0], [1.557481933E12, 1.0], [1.557481847E12, 1.0], [1.557481765E12, 1.0], [1.557481892E12, 1.0], [1.557481806E12, 1.0], [1.557481884E12, 1.0], [1.557481798E12, 1.0], [1.557481888E12, 1.0], [1.557481802E12, 1.0], [1.557481929E12, 1.0], [1.557481843E12, 1.0], [1.55748188E12, 1.0], [1.557481794E12, 1.0], [1.557481921E12, 1.0], [1.557481835E12, 1.0], [1.557481925E12, 1.0], [1.557481839E12, 1.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.557481935E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 97.0, "maxY": 1.0, "series": [{"data": [[17259.0, 0.0], [17155.0, 0.0], [16587.0, 0.0], [16611.0, 0.0], [16615.0, 0.0], [17223.0, 0.0], [17195.0, 0.0], [17191.0, 0.0], [16671.0, 0.0], [16467.0, 0.0], [17111.0, 0.0], [17007.0, 0.0], [16959.0, 0.0], [17151.0, 0.0], [17319.0, 0.0], [17303.0, 0.0], [17315.0, 0.0], [17287.0, 0.0], [18331.0, 0.0], [17651.0, 0.0], [17951.0, 0.0], [18163.0, 0.0], [17975.0, 0.0], [18419.0, 0.0], [17803.0, 0.0], [17767.0, 0.0], [18239.0, 0.0], [18279.0, 0.0], [17827.0, 0.0], [18427.0, 0.0], [17535.0, 0.0], [17447.0, 0.0], [17887.0, 0.0], [18895.0, 0.0], [18883.0, 0.0], [18931.0, 0.0], [18975.0, 0.0], [18867.0, 0.0], [18675.0, 0.0], [18811.0, 0.0], [18727.0, 0.0], [18491.0, 0.0], [9953.0, 0.0], [10451.0, 0.0], [10327.0, 0.0], [11743.0, 0.0], [13283.0, 0.0], [14315.0, 0.0], [14947.0, 0.0], [15205.0, 0.0], [15707.0, 0.0], [15567.0, 0.0], [15725.0, 0.0], [15841.0, 0.0], [15835.0, 0.0], [15413.0, 0.0], [16359.0, 0.0], [16267.0, 0.0], [16259.0, 0.0], [16087.0, 0.0], [16185.0, 0.0], [16814.0, 0.0], [17230.0, 0.0], [17266.0, 0.0], [17326.0, 0.0], [17590.0, 0.0], [17674.0, 0.0], [18210.0, 0.0], [17454.0, 0.0], [17790.0, 0.0], [18082.0, 0.0], [17966.0, 0.0], [18038.0, 0.0], [18230.0, 0.0], [18466.0, 0.0], [18758.0, 0.0], [18662.0, 0.0], [19030.0, 0.0], [18654.0, 0.0], [19274.0, 0.0], [19486.0, 0.0], [97.0, 1.0], [17161.0, 0.0], [16393.0, 0.0], [16661.0, 0.0], [16597.0, 0.0], [16609.0, 0.0], [16701.0, 0.0], [16869.0, 0.0], [17325.0, 0.0], [16901.0, 0.0], [16941.0, 0.0], [17125.0, 0.0], [17293.0, 0.0], [17185.0, 0.0], [17613.0, 0.0], [17985.0, 0.0], [18109.0, 0.0], [18161.0, 0.0], [17773.0, 0.0], [18381.0, 0.0], [18401.0, 0.0], [18229.0, 0.0], [18265.0, 0.0], [18429.0, 0.0], [17473.0, 0.0], [17433.0, 0.0], [17901.0, 0.0], [17877.0, 0.0], [18621.0, 0.0], [18761.0, 0.0], [18629.0, 0.0], [18637.0, 0.0], [18653.0, 0.0], [19333.0, 0.0], [19025.0, 0.0], [19249.0, 0.0], [18821.0, 0.0], [18809.0, 0.0], [18497.0, 0.0], [18757.0, 0.0], [18693.0, 0.0], [19565.0, 0.0], [5096.0, 0.0], [12220.0, 0.0], [13946.0, 0.0], [15378.0, 0.0], [15688.0, 0.0], [15768.0, 0.0], [16138.0, 0.0], [16288.0, 0.0], [16086.0, 0.0], [16110.0, 0.0], [17348.0, 0.0], [17156.0, 0.0], [16720.0, 0.0], [17148.0, 0.0], [17200.0, 0.0], [17152.0, 0.0], [16868.0, 0.0], [17112.0, 0.0], [17564.0, 0.0], [17896.0, 0.0], [18308.0, 0.0], [17592.0, 0.0], [17632.0, 0.0], [17640.0, 0.0], [17512.0, 0.0], [17744.0, 0.0], [17864.0, 0.0], [17748.0, 0.0], [17860.0, 0.0], [17700.0, 0.0], [19348.0, 0.0], [18556.0, 0.0], [18924.0, 0.0], [18708.0, 0.0], [19144.0, 0.0], [19160.0, 0.0], [19192.0, 0.0], [19036.0, 0.0], [18516.0, 0.0], [18536.0, 0.0], [18636.0, 0.0], [18640.0, 0.0], [18648.0, 0.0], [18576.0, 0.0], [19512.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19565.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 97.0, "maxY": 1.0, "series": [{"data": [[17259.0, 0.0], [17155.0, 0.0], [16587.0, 0.0], [16611.0, 0.0], [16615.0, 0.0], [17223.0, 0.0], [17195.0, 0.0], [17191.0, 0.0], [16671.0, 0.0], [16467.0, 0.0], [17111.0, 0.0], [17007.0, 0.0], [16959.0, 0.0], [17151.0, 0.0], [17319.0, 0.0], [17303.0, 0.0], [17315.0, 0.0], [17287.0, 0.0], [18331.0, 0.0], [17651.0, 0.0], [17951.0, 0.0], [18163.0, 0.0], [17975.0, 0.0], [18419.0, 0.0], [17803.0, 0.0], [17767.0, 0.0], [18239.0, 0.0], [18279.0, 0.0], [17827.0, 0.0], [18427.0, 0.0], [17535.0, 0.0], [17447.0, 0.0], [17887.0, 0.0], [18895.0, 0.0], [18883.0, 0.0], [18931.0, 0.0], [18975.0, 0.0], [18867.0, 0.0], [18675.0, 0.0], [18811.0, 0.0], [18727.0, 0.0], [18491.0, 0.0], [9953.0, 0.0], [10451.0, 0.0], [10327.0, 0.0], [11743.0, 0.0], [13283.0, 0.0], [14315.0, 0.0], [14947.0, 0.0], [15205.0, 0.0], [15707.0, 0.0], [15567.0, 0.0], [15725.0, 0.0], [15841.0, 0.0], [15835.0, 0.0], [15413.0, 0.0], [16359.0, 0.0], [16267.0, 0.0], [16259.0, 0.0], [16087.0, 0.0], [16185.0, 0.0], [16814.0, 0.0], [17230.0, 0.0], [17266.0, 0.0], [17326.0, 0.0], [17590.0, 0.0], [17674.0, 0.0], [18210.0, 0.0], [17454.0, 0.0], [17790.0, 0.0], [18082.0, 0.0], [17966.0, 0.0], [18038.0, 0.0], [18230.0, 0.0], [18466.0, 0.0], [18758.0, 0.0], [18662.0, 0.0], [19030.0, 0.0], [18654.0, 0.0], [19274.0, 0.0], [19486.0, 0.0], [97.0, 1.0], [17161.0, 0.0], [16393.0, 0.0], [16661.0, 0.0], [16597.0, 0.0], [16609.0, 0.0], [16701.0, 0.0], [16869.0, 0.0], [17325.0, 0.0], [16901.0, 0.0], [16941.0, 0.0], [17125.0, 0.0], [17293.0, 0.0], [17185.0, 0.0], [17613.0, 0.0], [17985.0, 0.0], [18109.0, 0.0], [18161.0, 0.0], [17773.0, 0.0], [18381.0, 0.0], [18401.0, 0.0], [18229.0, 0.0], [18265.0, 0.0], [18429.0, 0.0], [17473.0, 0.0], [17433.0, 0.0], [17901.0, 0.0], [17877.0, 0.0], [18621.0, 0.0], [18761.0, 0.0], [18629.0, 0.0], [18637.0, 0.0], [18653.0, 0.0], [19333.0, 0.0], [19025.0, 0.0], [19249.0, 0.0], [18821.0, 0.0], [18809.0, 0.0], [18497.0, 0.0], [18757.0, 0.0], [18693.0, 0.0], [19565.0, 0.0], [5096.0, 0.0], [12220.0, 0.0], [13946.0, 0.0], [15378.0, 0.0], [15688.0, 0.0], [15768.0, 0.0], [16138.0, 0.0], [16288.0, 0.0], [16086.0, 0.0], [16110.0, 0.0], [17348.0, 0.0], [17156.0, 0.0], [16720.0, 0.0], [17148.0, 0.0], [17200.0, 0.0], [17152.0, 0.0], [16868.0, 0.0], [17112.0, 0.0], [17564.0, 0.0], [17896.0, 0.0], [18308.0, 0.0], [17592.0, 0.0], [17632.0, 0.0], [17640.0, 0.0], [17512.0, 0.0], [17744.0, 0.0], [17864.0, 0.0], [17748.0, 0.0], [17860.0, 0.0], [17700.0, 0.0], [19348.0, 0.0], [18556.0, 0.0], [18924.0, 0.0], [18708.0, 0.0], [19144.0, 0.0], [19160.0, 0.0], [19192.0, 0.0], [19036.0, 0.0], [18516.0, 0.0], [18536.0, 0.0], [18636.0, 0.0], [18640.0, 0.0], [18648.0, 0.0], [18576.0, 0.0], [19512.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19565.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 98.0, "minX": 1.557481762E12, "maxY": 19564.0, "series": [{"data": [[1.557481789E12, 17564.0], [1.557481916E12, 16614.0], [1.55748183E12, 17446.0], [1.55748192E12, 15413.0], [1.557481834E12, 18163.0], [1.557481875E12, 16268.0], [1.557481912E12, 17859.0], [1.557481826E12, 16901.0], [1.557481867E12, 18674.0], [1.557481871E12, 18640.0], [1.557481785E12, 16814.0], [1.557481863E12, 18655.0], [1.557481777E12, 18308.0], [1.557481781E12, 19030.0], [1.557481908E12, 18536.0], [1.557481822E12, 18382.0], [1.557481773E12, 17951.0], [1.5574819E12, 17151.0], [1.557481814E12, 17154.0], [1.557481904E12, 16588.0], [1.557481818E12, 17319.0], [1.557481859E12, 18896.0], [1.557481768E12, 13283.0], [1.557481895E12, 15726.0], [1.557481809E12, 18229.0], [1.557481813E12, 18331.0], [1.557481854E12, 17512.0], [1.557481805E12, 16588.0], [1.557481932E12, 18231.0], [1.557481846E12, 16719.0], [1.55748185E12, 17590.0], [1.557481764E12, 9954.0], [1.557481891E12, 16610.0], [1.557481928E12, 17112.0], [1.557481842E12, 18867.0], [1.557481883E12, 17266.0], [1.557481887E12, 17195.0], [1.557481801E12, 18239.0], [1.557481879E12, 16869.0], [1.557481793E12, 13947.0], [1.557481797E12, 17324.0], [1.557481924E12, 18492.0], [1.557481838E12, 19564.0], [1.557481874E12, 17632.0], [1.557481788E12, 17651.0], [1.557481915E12, 16868.0], [1.557481792E12, 17258.0], [1.557481919E12, 16086.0], [1.557481833E12, 18821.0], [1.557481784E12, 18762.0], [1.557481911E12, 17008.0], [1.557481825E12, 17985.0], [1.557481829E12, 18976.0], [1.55748187E12, 17876.0], [1.557481821E12, 19333.0], [1.557481862E12, 18265.0], [1.557481866E12, 18694.0], [1.55748178E12, 17826.0], [1.557481907E12, 19274.0], [1.557481858E12, 18621.0], [1.557481772E12, 18555.0], [1.557481899E12, 18498.0], [1.557481776E12, 18467.0], [1.557481903E12, 17191.0], [1.557481817E12, 17744.0], [1.557481853E12, 19348.0], [1.557481767E12, 12221.0], [1.557481894E12, 16942.0], [1.557481898E12, 19485.0], [1.557481812E12, 17791.0], [1.55748189E12, 16259.0], [1.557481804E12, 16701.0], [1.557481931E12, 18630.0], [1.557481808E12, 18629.0], [1.557481935E12, 10325.0], [1.557481849E12, 18694.0], [1.557481763E12, 5097.0], [1.5574818E12, 17453.0], [1.557481927E12, 16959.0], [1.557481841E12, 18709.0], [1.557481845E12, 17156.0], [1.557481886E12, 15568.0], [1.557481837E12, 18757.0], [1.557481878E12, 17749.0], [1.557481882E12, 18637.0], [1.557481796E12, 17473.0], [1.557481923E12, 17125.0], [1.557481832E12, 19250.0], [1.557481873E12, 17199.0], [1.557481787E12, 16392.0], [1.557481877E12, 17864.0], [1.557481791E12, 16359.0], [1.557481918E12, 16185.0], [1.557481869E12, 18728.0], [1.557481783E12, 18882.0], [1.55748191E12, 15835.0], [1.557481914E12, 18163.0], [1.557481828E12, 17612.0], [1.557481906E12, 18280.0], [1.55748182E12, 17433.0], [1.557481824E12, 19512.0], [1.557481865E12, 17639.0], [1.557481779E12, 18663.0], [1.557481816E12, 17292.0], [1.557481857E12, 17303.0], [1.557481771E12, 17349.0], [1.557481861E12, 19024.0], [1.557481775E12, 17674.0], [1.557481902E12, 16087.0], [1.557481852E12, 18210.0], [1.557481766E12, 11743.0], [1.557481856E12, 17303.0], [1.55748177E12, 16661.0], [1.557481897E12, 19192.0], [1.557481811E12, 18426.0], [1.557481848E12, 17222.0], [1.557481762E12, 98.0], [1.557481889E12, 18647.0], [1.557481803E12, 15706.0], [1.557481893E12, 17150.0], [1.557481807E12, 18637.0], [1.557481934E12, 18652.0], [1.557481885E12, 15205.0], [1.557481799E12, 18516.0], [1.557481926E12, 17325.0], [1.55748193E12, 16607.0], [1.557481844E12, 17111.0], [1.557481922E12, 17230.0], [1.557481836E12, 19160.0], [1.55748184E12, 17773.0], [1.557481881E12, 15688.0], [1.557481795E12, 17535.0], [1.557481917E12, 16289.0], [1.557481831E12, 18401.0], [1.557481876E12, 17285.0], [1.55748179E12, 14947.0], [1.557481868E12, 18811.0], [1.557481782E12, 18430.0], [1.557481872E12, 18083.0], [1.557481786E12, 17161.0], [1.557481913E12, 18037.0], [1.557481827E12, 16138.0], [1.557481864E12, 18576.0], [1.557481778E12, 19143.0], [1.557481905E12, 17184.0], [1.557481819E12, 19036.0], [1.557481909E12, 15840.0], [1.557481823E12, 18923.0], [1.557481901E12, 17316.0], [1.557481815E12, 14317.0], [1.55748186E12, 17975.0], [1.557481774E12, 18419.0], [1.557481896E12, 17965.0], [1.55748181E12, 17802.0], [1.557481851E12, 18932.0], [1.557481855E12, 16597.0], [1.557481769E12, 15377.0], [1.557481933E12, 18810.0], [1.557481847E12, 17150.0], [1.557481765E12, 10450.0], [1.557481892E12, 15769.0], [1.557481806E12, 17589.0], [1.557481884E12, 17767.0], [1.557481798E12, 17897.0], [1.557481888E12, 18109.0], [1.557481802E12, 17232.0], [1.557481929E12, 17887.0], [1.557481843E12, 17900.0], [1.55748188E12, 16467.0], [1.557481794E12, 16671.0], [1.557481921E12, 17154.0], [1.557481835E12, 17700.0], [1.557481925E12, 16110.0], [1.557481839E12, 18759.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.557481935E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 97.0, "minX": 1.557481762E12, "maxY": 19565.0, "series": [{"data": [[1.557481789E12, 17564.0], [1.557481916E12, 16615.0], [1.55748183E12, 17447.0], [1.55748192E12, 15413.0], [1.557481834E12, 18163.0], [1.557481875E12, 16267.0], [1.557481912E12, 17860.0], [1.557481826E12, 16901.0], [1.557481867E12, 18675.0], [1.557481871E12, 18640.0], [1.557481785E12, 16814.0], [1.557481863E12, 18654.0], [1.557481777E12, 18308.0], [1.557481781E12, 19030.0], [1.557481908E12, 18536.0], [1.557481822E12, 18381.0], [1.557481773E12, 17951.0], [1.5574819E12, 17152.0], [1.557481814E12, 17155.0], [1.557481904E12, 16587.0], [1.557481818E12, 17319.0], [1.557481859E12, 18895.0], [1.557481768E12, 13283.0], [1.557481895E12, 15725.0], [1.557481809E12, 18229.0], [1.557481813E12, 18331.0], [1.557481854E12, 17512.0], [1.557481805E12, 16587.0], [1.557481932E12, 18230.0], [1.557481846E12, 16720.0], [1.55748185E12, 17592.0], [1.557481764E12, 9953.0], [1.557481891E12, 16611.0], [1.557481928E12, 17112.0], [1.557481842E12, 18867.0], [1.557481883E12, 17266.0], [1.557481887E12, 17195.0], [1.557481801E12, 18239.0], [1.557481879E12, 16869.0], [1.557481793E12, 13946.0], [1.557481797E12, 17325.0], [1.557481924E12, 18491.0], [1.557481838E12, 19565.0], [1.557481874E12, 17632.0], [1.557481788E12, 17651.0], [1.557481915E12, 16868.0], [1.557481792E12, 17259.0], [1.557481919E12, 16086.0], [1.557481833E12, 18821.0], [1.557481784E12, 18761.0], [1.557481911E12, 17007.0], [1.557481825E12, 17985.0], [1.557481829E12, 18975.0], [1.55748187E12, 17877.0], [1.557481821E12, 19333.0], [1.557481862E12, 18265.0], [1.557481866E12, 18693.0], [1.55748178E12, 17827.0], [1.557481907E12, 19274.0], [1.557481858E12, 18621.0], [1.557481772E12, 18556.0], [1.557481899E12, 18497.0], [1.557481776E12, 18466.0], [1.557481903E12, 17191.0], [1.557481817E12, 17744.0], [1.557481853E12, 19348.0], [1.557481767E12, 12220.0], [1.557481894E12, 16941.0], [1.557481898E12, 19486.0], [1.557481812E12, 17790.0], [1.55748189E12, 16259.0], [1.557481804E12, 16701.0], [1.557481931E12, 18629.0], [1.557481808E12, 18629.0], [1.557481935E12, 10327.0], [1.557481849E12, 18693.0], [1.557481763E12, 5096.0], [1.5574818E12, 17454.0], [1.557481927E12, 16959.0], [1.557481841E12, 18708.0], [1.557481845E12, 17156.0], [1.557481886E12, 15567.0], [1.557481837E12, 18757.0], [1.557481878E12, 17748.0], [1.557481882E12, 18637.0], [1.557481796E12, 17473.0], [1.557481923E12, 17125.0], [1.557481832E12, 19249.0], [1.557481873E12, 17200.0], [1.557481787E12, 16393.0], [1.557481877E12, 17864.0], [1.557481791E12, 16359.0], [1.557481918E12, 16185.0], [1.557481869E12, 18727.0], [1.557481783E12, 18883.0], [1.55748191E12, 15835.0], [1.557481914E12, 18161.0], [1.557481828E12, 17613.0], [1.557481906E12, 18279.0], [1.55748182E12, 17433.0], [1.557481824E12, 19512.0], [1.557481865E12, 17640.0], [1.557481779E12, 18662.0], [1.557481816E12, 17293.0], [1.557481857E12, 17303.0], [1.557481771E12, 17348.0], [1.557481861E12, 19025.0], [1.557481775E12, 17674.0], [1.557481902E12, 16087.0], [1.557481852E12, 18210.0], [1.557481766E12, 11743.0], [1.557481856E12, 17303.0], [1.55748177E12, 16661.0], [1.557481897E12, 19192.0], [1.557481811E12, 18427.0], [1.557481848E12, 17223.0], [1.557481762E12, 97.0], [1.557481889E12, 18648.0], [1.557481803E12, 15707.0], [1.557481893E12, 17151.0], [1.557481807E12, 18636.0], [1.557481934E12, 18653.0], [1.557481885E12, 15205.0], [1.557481799E12, 18516.0], [1.557481926E12, 17326.0], [1.55748193E12, 16609.0], [1.557481844E12, 17111.0], [1.557481922E12, 17230.0], [1.557481836E12, 19160.0], [1.55748184E12, 17773.0], [1.557481881E12, 15688.0], [1.557481795E12, 17535.0], [1.557481917E12, 16288.0], [1.557481831E12, 18401.0], [1.557481876E12, 17287.0], [1.55748179E12, 14947.0], [1.557481868E12, 18811.0], [1.557481782E12, 18429.0], [1.557481872E12, 18082.0], [1.557481786E12, 17161.0], [1.557481913E12, 18038.0], [1.557481827E12, 16138.0], [1.557481864E12, 18576.0], [1.557481778E12, 19144.0], [1.557481905E12, 17185.0], [1.557481819E12, 19036.0], [1.557481909E12, 15841.0], [1.557481823E12, 18924.0], [1.557481901E12, 17315.0], [1.557481815E12, 14315.0], [1.55748186E12, 17975.0], [1.557481774E12, 18419.0], [1.557481896E12, 17966.0], [1.55748181E12, 17803.0], [1.557481851E12, 18931.0], [1.557481855E12, 16597.0], [1.557481769E12, 15378.0], [1.557481933E12, 18809.0], [1.557481847E12, 17148.0], [1.557481765E12, 10451.0], [1.557481892E12, 15768.0], [1.557481806E12, 17590.0], [1.557481884E12, 17767.0], [1.557481798E12, 17896.0], [1.557481888E12, 18109.0], [1.557481802E12, 17230.0], [1.557481929E12, 17887.0], [1.557481843E12, 17901.0], [1.55748188E12, 16467.0], [1.557481794E12, 16671.0], [1.557481921E12, 17155.0], [1.557481835E12, 17700.0], [1.557481925E12, 16110.0], [1.557481839E12, 18758.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.557481935E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 97.0, "minX": 1.557481762E12, "maxY": 19565.0, "series": [{"data": [[1.557481789E12, 17564.0], [1.557481916E12, 16615.0], [1.55748183E12, 17447.0], [1.55748192E12, 15413.0], [1.557481834E12, 18163.0], [1.557481875E12, 16267.0], [1.557481912E12, 17860.0], [1.557481826E12, 16901.0], [1.557481867E12, 18675.0], [1.557481871E12, 18640.0], [1.557481785E12, 16814.0], [1.557481863E12, 18654.0], [1.557481777E12, 18308.0], [1.557481781E12, 19030.0], [1.557481908E12, 18536.0], [1.557481822E12, 18381.0], [1.557481773E12, 17951.0], [1.5574819E12, 17152.0], [1.557481814E12, 17155.0], [1.557481904E12, 16587.0], [1.557481818E12, 17319.0], [1.557481859E12, 18895.0], [1.557481768E12, 13283.0], [1.557481895E12, 15725.0], [1.557481809E12, 18229.0], [1.557481813E12, 18331.0], [1.557481854E12, 17512.0], [1.557481805E12, 16587.0], [1.557481932E12, 18230.0], [1.557481846E12, 16720.0], [1.55748185E12, 17592.0], [1.557481764E12, 9953.0], [1.557481891E12, 16611.0], [1.557481928E12, 17112.0], [1.557481842E12, 18867.0], [1.557481883E12, 17266.0], [1.557481887E12, 17195.0], [1.557481801E12, 18239.0], [1.557481879E12, 16869.0], [1.557481793E12, 13946.0], [1.557481797E12, 17325.0], [1.557481924E12, 18491.0], [1.557481838E12, 19565.0], [1.557481874E12, 17632.0], [1.557481788E12, 17651.0], [1.557481915E12, 16868.0], [1.557481792E12, 17259.0], [1.557481919E12, 16086.0], [1.557481833E12, 18821.0], [1.557481784E12, 18761.0], [1.557481911E12, 17007.0], [1.557481825E12, 17985.0], [1.557481829E12, 18975.0], [1.55748187E12, 17877.0], [1.557481821E12, 19333.0], [1.557481862E12, 18265.0], [1.557481866E12, 18693.0], [1.55748178E12, 17827.0], [1.557481907E12, 19274.0], [1.557481858E12, 18621.0], [1.557481772E12, 18556.0], [1.557481899E12, 18497.0], [1.557481776E12, 18466.0], [1.557481903E12, 17191.0], [1.557481817E12, 17744.0], [1.557481853E12, 19348.0], [1.557481767E12, 12220.0], [1.557481894E12, 16941.0], [1.557481898E12, 19486.0], [1.557481812E12, 17790.0], [1.55748189E12, 16259.0], [1.557481804E12, 16701.0], [1.557481931E12, 18629.0], [1.557481808E12, 18629.0], [1.557481935E12, 10327.0], [1.557481849E12, 18693.0], [1.557481763E12, 5096.0], [1.5574818E12, 17454.0], [1.557481927E12, 16959.0], [1.557481841E12, 18708.0], [1.557481845E12, 17156.0], [1.557481886E12, 15567.0], [1.557481837E12, 18757.0], [1.557481878E12, 17748.0], [1.557481882E12, 18637.0], [1.557481796E12, 17473.0], [1.557481923E12, 17125.0], [1.557481832E12, 19249.0], [1.557481873E12, 17200.0], [1.557481787E12, 16393.0], [1.557481877E12, 17864.0], [1.557481791E12, 16359.0], [1.557481918E12, 16185.0], [1.557481869E12, 18727.0], [1.557481783E12, 18883.0], [1.55748191E12, 15835.0], [1.557481914E12, 18161.0], [1.557481828E12, 17613.0], [1.557481906E12, 18279.0], [1.55748182E12, 17433.0], [1.557481824E12, 19512.0], [1.557481865E12, 17640.0], [1.557481779E12, 18662.0], [1.557481816E12, 17293.0], [1.557481857E12, 17303.0], [1.557481771E12, 17348.0], [1.557481861E12, 19025.0], [1.557481775E12, 17674.0], [1.557481902E12, 16087.0], [1.557481852E12, 18210.0], [1.557481766E12, 11743.0], [1.557481856E12, 17303.0], [1.55748177E12, 16661.0], [1.557481897E12, 19192.0], [1.557481811E12, 18427.0], [1.557481848E12, 17223.0], [1.557481762E12, 97.0], [1.557481889E12, 18648.0], [1.557481803E12, 15707.0], [1.557481893E12, 17151.0], [1.557481807E12, 18636.0], [1.557481934E12, 18653.0], [1.557481885E12, 15205.0], [1.557481799E12, 18516.0], [1.557481926E12, 17326.0], [1.55748193E12, 16609.0], [1.557481844E12, 17111.0], [1.557481922E12, 17230.0], [1.557481836E12, 19160.0], [1.55748184E12, 17773.0], [1.557481881E12, 15688.0], [1.557481795E12, 17535.0], [1.557481917E12, 16288.0], [1.557481831E12, 18401.0], [1.557481876E12, 17287.0], [1.55748179E12, 14947.0], [1.557481868E12, 18811.0], [1.557481782E12, 18429.0], [1.557481872E12, 18082.0], [1.557481786E12, 17161.0], [1.557481913E12, 18038.0], [1.557481827E12, 16138.0], [1.557481864E12, 18576.0], [1.557481778E12, 19144.0], [1.557481905E12, 17185.0], [1.557481819E12, 19036.0], [1.557481909E12, 15841.0], [1.557481823E12, 18924.0], [1.557481901E12, 17315.0], [1.557481815E12, 14315.0], [1.55748186E12, 17975.0], [1.557481774E12, 18419.0], [1.557481896E12, 17966.0], [1.55748181E12, 17803.0], [1.557481851E12, 18931.0], [1.557481855E12, 16597.0], [1.557481769E12, 15378.0], [1.557481933E12, 18809.0], [1.557481847E12, 17148.0], [1.557481765E12, 10451.0], [1.557481892E12, 15768.0], [1.557481806E12, 17590.0], [1.557481884E12, 17767.0], [1.557481798E12, 17896.0], [1.557481888E12, 18109.0], [1.557481802E12, 17230.0], [1.557481929E12, 17887.0], [1.557481843E12, 17901.0], [1.55748188E12, 16467.0], [1.557481794E12, 16671.0], [1.557481921E12, 17155.0], [1.557481835E12, 17700.0], [1.557481925E12, 16110.0], [1.557481839E12, 18758.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.557481935E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 97.0, "minX": 1.557481762E12, "maxY": 19565.0, "series": [{"data": [[1.557481789E12, 17564.0], [1.557481916E12, 16615.0], [1.55748183E12, 17447.0], [1.55748192E12, 15413.0], [1.557481834E12, 18163.0], [1.557481875E12, 16267.0], [1.557481912E12, 17860.0], [1.557481826E12, 16901.0], [1.557481867E12, 18675.0], [1.557481871E12, 18640.0], [1.557481785E12, 16814.0], [1.557481863E12, 18654.0], [1.557481777E12, 18308.0], [1.557481781E12, 19030.0], [1.557481908E12, 18536.0], [1.557481822E12, 18381.0], [1.557481773E12, 17951.0], [1.5574819E12, 17152.0], [1.557481814E12, 17155.0], [1.557481904E12, 16587.0], [1.557481818E12, 17319.0], [1.557481859E12, 18895.0], [1.557481768E12, 13283.0], [1.557481895E12, 15725.0], [1.557481809E12, 18229.0], [1.557481813E12, 18331.0], [1.557481854E12, 17512.0], [1.557481805E12, 16587.0], [1.557481932E12, 18230.0], [1.557481846E12, 16720.0], [1.55748185E12, 17592.0], [1.557481764E12, 9953.0], [1.557481891E12, 16611.0], [1.557481928E12, 17112.0], [1.557481842E12, 18867.0], [1.557481883E12, 17266.0], [1.557481887E12, 17195.0], [1.557481801E12, 18239.0], [1.557481879E12, 16869.0], [1.557481793E12, 13946.0], [1.557481797E12, 17325.0], [1.557481924E12, 18491.0], [1.557481838E12, 19565.0], [1.557481874E12, 17632.0], [1.557481788E12, 17651.0], [1.557481915E12, 16868.0], [1.557481792E12, 17259.0], [1.557481919E12, 16086.0], [1.557481833E12, 18821.0], [1.557481784E12, 18761.0], [1.557481911E12, 17007.0], [1.557481825E12, 17985.0], [1.557481829E12, 18975.0], [1.55748187E12, 17877.0], [1.557481821E12, 19333.0], [1.557481862E12, 18265.0], [1.557481866E12, 18693.0], [1.55748178E12, 17827.0], [1.557481907E12, 19274.0], [1.557481858E12, 18621.0], [1.557481772E12, 18556.0], [1.557481899E12, 18497.0], [1.557481776E12, 18466.0], [1.557481903E12, 17191.0], [1.557481817E12, 17744.0], [1.557481853E12, 19348.0], [1.557481767E12, 12220.0], [1.557481894E12, 16941.0], [1.557481898E12, 19486.0], [1.557481812E12, 17790.0], [1.55748189E12, 16259.0], [1.557481804E12, 16701.0], [1.557481931E12, 18629.0], [1.557481808E12, 18629.0], [1.557481935E12, 10327.0], [1.557481849E12, 18693.0], [1.557481763E12, 5096.0], [1.5574818E12, 17454.0], [1.557481927E12, 16959.0], [1.557481841E12, 18708.0], [1.557481845E12, 17156.0], [1.557481886E12, 15567.0], [1.557481837E12, 18757.0], [1.557481878E12, 17748.0], [1.557481882E12, 18637.0], [1.557481796E12, 17473.0], [1.557481923E12, 17125.0], [1.557481832E12, 19249.0], [1.557481873E12, 17200.0], [1.557481787E12, 16393.0], [1.557481877E12, 17864.0], [1.557481791E12, 16359.0], [1.557481918E12, 16185.0], [1.557481869E12, 18727.0], [1.557481783E12, 18883.0], [1.55748191E12, 15835.0], [1.557481914E12, 18161.0], [1.557481828E12, 17613.0], [1.557481906E12, 18279.0], [1.55748182E12, 17433.0], [1.557481824E12, 19512.0], [1.557481865E12, 17640.0], [1.557481779E12, 18662.0], [1.557481816E12, 17293.0], [1.557481857E12, 17303.0], [1.557481771E12, 17348.0], [1.557481861E12, 19025.0], [1.557481775E12, 17674.0], [1.557481902E12, 16087.0], [1.557481852E12, 18210.0], [1.557481766E12, 11743.0], [1.557481856E12, 17303.0], [1.55748177E12, 16661.0], [1.557481897E12, 19192.0], [1.557481811E12, 18427.0], [1.557481848E12, 17223.0], [1.557481762E12, 97.0], [1.557481889E12, 18648.0], [1.557481803E12, 15707.0], [1.557481893E12, 17151.0], [1.557481807E12, 18636.0], [1.557481934E12, 18653.0], [1.557481885E12, 15205.0], [1.557481799E12, 18516.0], [1.557481926E12, 17326.0], [1.55748193E12, 16609.0], [1.557481844E12, 17111.0], [1.557481922E12, 17230.0], [1.557481836E12, 19160.0], [1.55748184E12, 17773.0], [1.557481881E12, 15688.0], [1.557481795E12, 17535.0], [1.557481917E12, 16288.0], [1.557481831E12, 18401.0], [1.557481876E12, 17287.0], [1.55748179E12, 14947.0], [1.557481868E12, 18811.0], [1.557481782E12, 18429.0], [1.557481872E12, 18082.0], [1.557481786E12, 17161.0], [1.557481913E12, 18038.0], [1.557481827E12, 16138.0], [1.557481864E12, 18576.0], [1.557481778E12, 19144.0], [1.557481905E12, 17185.0], [1.557481819E12, 19036.0], [1.557481909E12, 15841.0], [1.557481823E12, 18924.0], [1.557481901E12, 17315.0], [1.557481815E12, 14315.0], [1.55748186E12, 17975.0], [1.557481774E12, 18419.0], [1.557481896E12, 17966.0], [1.55748181E12, 17803.0], [1.557481851E12, 18931.0], [1.557481855E12, 16597.0], [1.557481769E12, 15378.0], [1.557481933E12, 18809.0], [1.557481847E12, 17148.0], [1.557481765E12, 10451.0], [1.557481892E12, 15768.0], [1.557481806E12, 17590.0], [1.557481884E12, 17767.0], [1.557481798E12, 17896.0], [1.557481888E12, 18109.0], [1.557481802E12, 17230.0], [1.557481929E12, 17887.0], [1.557481843E12, 17901.0], [1.55748188E12, 16467.0], [1.557481794E12, 16671.0], [1.557481921E12, 17155.0], [1.557481835E12, 17700.0], [1.557481925E12, 16110.0], [1.557481839E12, 18758.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.557481935E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

