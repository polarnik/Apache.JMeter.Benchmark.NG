Ускоряем Apache.JMeter
Неочевидные варианты работы с JMeter

Для кого этот доклад. Для тех кто использует JMeter и ценит время. Идеальный вариант по производительности - написать тест на java, но долго. Идеальный вариант по скорости разработки скрипта - использование готовых компонентов. Но нужно понимать производительность каждого компонента.

Проведём замеры и сравнения.

Выписать те правки, что относятся к производительности.

Выбрать известные дефекты, что относятся к производительности.

Причины выбора JMeter
Быстрое начало работы за счёт хорошей документации и большого количества готовых компонентов.
Большое сообщество. Наличие руководств - сделать подборку руководств

Расчет профиля нагрузки, шага нагрузки, важность производительной работы JMeter. Замерить длительность транзакции и необходимой величины шага нагрузки. Дать рекомендации по выбору шага нагрузки и количества потоков. Рекомендации по определению минимально эффективного шага нагрузки. И максимально эффективного количества потоков.

Выполнить сравнительное тестирование на ноутбуке 1, ноутбуке 2, виртуальной машине, настольном компьютере. Описать допущения - расположение нагружаемого сервера.


Аудит производительности Apache.JMeter
Методика тестирования.
Цели - определить вклад каждого компонента в производительность работы скрипта. Debug sampler замедляет тест на ... процентов.
Выявить компоненты, требующие оптимизации, выполнить профилирование их работы, проведя синтетический тест на каждый компонентов.

Работа по улучшению производительности Apache.JMeter.
Собрать статистику, визуализировать работу с репозиторием.

Использовать OpenJDK при выполнении замеров. Напомнить об изменениях лицензионной политики Oracle. И использовать операционную систему Linux.
